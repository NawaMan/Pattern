// @RegParserTypePackage: { function ():net.nawaman.regparser.typepackage.PTypePackage }

// TypePackage *************************************************************************************

// TypeKinds *****************************************************************************

// Error +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Error:

#Variables:
	var Checker;
	var ErrMessage;
	var IsFatal;

#Constructor:
	// @Java:
	import net.nawaman.regparser.*;
    import net.nawaman.regparser.types.*;
	import net.nawaman.regparser.typepackage.*;
	
	String Name    = (String)$Spec.getValue("Name");
	String Checker = (String)$Spec.getValue("Checker");
	String ErrMsg  = (String)$Spec.getValue("ErrMessage");
	String IsFatal = (String)$Spec.getValue("IsFatal");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of an error parser type cannot be null. ("+Name+")");
	if(ErrMsg  == null) throw new NullPointerException("Error message of an error parser type cannot be null. ("+Name+")");
	if(IsFatal != null) IsFatal = IsFatal.trim();
	return new PTError(Name, RegParser.newRegParser($TPackage, Checker), ErrMsg.trim(), "true".equals(IsFatal));

#end def_kind;

// Simple ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Simple:

#Variables:
	var Checker;
	var Verifier;
	var Compiler;

#Constructor:
	// @Java: 
	import net.nawaman.regparser.*;
	import net.nawaman.regparser.typepackage.*;
	import net.nawaman.script.*;
	
	String Name     = (String)$Spec.getValue("Name");
	String Checker  = (String)$Spec.getValue("Checker");
	String Verifier = (String)$Spec.getValue("Verifier");
	String Compiler = (String)$Spec.getValue("Compiler");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of a simple parser type cannot be null. ("+Name+")");
	
	net.nawaman.regparser.RegParser ParserCK = null;
	net.nawaman.regparser.RPGetChecker ParserGC = null;
	Object CkEn = null;	try { CkEn = net.nawaman.script.ScriptManager.GetEngineFromCode(Checker); } catch(RuntimeException RTE) {} 
	if(CkEn == null) ParserCK = net.nawaman.regparser.RegParser.newRegParser($TPackage, Checker);
	else             ParserGC = new net.nawaman.regparser.typepackage.TPGetChecker($TPackage, Name, Checker);
	
	if((ParserCK == null) && (ParserGC == null)) throw new NullPointerException("Checker is not a valid RegParser. ("+Name+")");
	
	net.nawaman.regparser.typepackage.TPVerifier TheVerifier = (Verifier == null)?null:new net.nawaman.regparser.typepackage.TPVerifier($TPackage, Name, Verifier);
	net.nawaman.regparser.typepackage.TPCompiler TheCompiler = (Compiler == null)?null:new net.nawaman.regparser.typepackage.TPCompiler($TPackage, Name, Compiler);
	
	if(ParserCK != null) {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.PTSimple(Name, ParserCK);
		else return new net.nawaman.regparser.types.PTComposable(Name, ParserCK, TheVerifier, TheCompiler);
	} else {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.PTSimple(Name, ParserGC);
		else return new net.nawaman.regparser.types.PTComposable(Name, ParserGC, TheVerifier, TheCompiler);
	}

#end def_kind;



// Types *********************************************************************************

// Line ------------------------------------------------------------------------
#def Simple parser Line:

#Checker:
	[:NewLine:]{0}
	($Tabs:~[:Tab:]*~)
	(
		($Method:~[:<:]null[:>:]~)
		
		||
		
		($Object:~(^given[: :]at[: :][:':])*~)
		given[: :]at[: :][:':]
	
		($File:~(^[: :]at[: :]CR[:(:])*~)
		[: :]at[: :]CR[:(:]
		
		($Col:~[: :]*[0-9]*~)
		[:,:]
		($Row:~[: :]*[0-9]*~)
		[:):]
	
		[: :][:=:][:>:][: :]
	
		($Method:~(^[:':][[: :][:Tab:]]*[:::])*~)
		
		[:':]
	)
	
	[[: :][:Tab:]]*[:::]
	
	($Text:~[^[:NewLine:]]*~)

#Compiler:
	// @RegParser(Java):
	return $$$Tabs$$.replace("\t","+ ") + $$$Method$$ + (($$$Row$$ != null) ? " (" + $$$Row$$ + ")" : "") + " : " + $$$Text$$;

#end def parser;

// Lines -----------------------------------------------------------------------
#def Simple parser Lines:

#Checker:
	(
		(#Line:!Line!)            [:NewLine:]
		||
		(#Line:~[^.]{0}~)[:Tab:]* [:NewLine:]
	)*

#Compiler:
	// @RegParser(Java):
	
	if ($$#Line$$ == null)
		return "";
		
	StringBuilder SB = new StringBuilder();
	Object[] Lines = @@#Line*@@;
	for (int i = 0; i < Lines.length; i++) {
		String Line = Lines[i].toString();
		
		if (Line.length() == 0)
			continue;
		
		SB.append(Line).append("\n");
	}
	return SB;

#end def parser;

// FormatedLine ----------------------------------------------------------------
#def Simple parser FormatedLine:

#Checker:
	($FirstPart:~
		(^[:::][: :])*
		~:~
		($Before:~(^([:.:][: :] | [: :])*.{0})*~)
	~)
	
	($After:~[^[:NewLine:]]*~)
	([:NewLine:] | .{0})

#end def parser;

// FormatedLines ---------------------------------------------------------------
#def Simple parser FormatedLines:

#Checker:
	(#Line:!FormatedLine!)*

#Compiler:
	// @RegParser(Java):
	import net.nawaman.regparser.*;
	
	if (###Line## == null)
		return "";

	ParseResult[] LinePRs = ###Line*##;
	
	int MaxOfBefore = 0;
	for (int i = 0; i < LinePRs.length; i++) {
		String Before       = LinePRs[i].textOf("$Before");
		int    BeforeLength = Before.length();
		
		if (BeforeLength > MaxOfBefore) 
			MaxOfBefore = BeforeLength;
	}
		
	StringBuilder SB = new StringBuilder();
	for (int i = 0; i < LinePRs.length; i++) {
		StringBuilder Line   = new StringBuilder();
		String        Before = LinePRs[i].textOf("$Before");
		String        After  = LinePRs[i].textOf("$After");
		
		Line.append(Before);
		
		while (Line.length() < MaxOfBefore) {
			if (((Line.length() - MaxOfBefore) % 2) == 0)
				 Line.append(".");
			else Line.append(" ");
		}
		
		Line.append(After);
				
		SB.append(Line).append("\n");
	}
	return SB;

#end def parser;



// More Datas **************************************************************************

#def_data:

#Names:
	//These data list are for reference only
	data: ToFreeze = true:java.lang.Boolean;


#Bytes:
	ACED0005757200175B4C6A6176612E696F2E53657269616C697A61626C653BAED009AC53D7ED4902
	0000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D1030002
	46000A6C6F6164466163746F724900097468726573686F6C6478703F4000000000000C7708000000
	1000000001740008546F467265657A65737200116A6176612E6C616E672E426F6F6C65616ECD2072
	80D59CFAEE0200015A000576616C756578700178

#end def_data;

