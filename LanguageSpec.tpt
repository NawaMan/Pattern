// @RegParserTypePackage: { function ():net.nawaman.regparser.typepackage.PTypePackage }

// TypePackage *************************************************************************************

// ClassPaths *****************************************************************************

#def_classpaths:
#ClassPath: /home/nawaman/Documents/Others/AppData/Eclipse/Curry/classes
#ClassPath: /home/nawaman/Documents/Others/AppData/Eclipse/NawaUtils/classes
#end def_classpaths;


// TypeKinds *****************************************************************************

// Error +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Error:

#Variables:
	var Checker;
	var ErrMessage;
	var IsFatal;

#Constructor:
	// @Java:
	import net.nawaman.regparser.*;
    import net.nawaman.regparser.types.*;
	import net.nawaman.regparser.typepackage.*;
	
	String Name    = (String)$Spec.getValue("Name");
	String Checker = (String)$Spec.getValue("Checker");
	String ErrMsg  = (String)$Spec.getValue("ErrMessage");
	String IsFatal = (String)$Spec.getValue("IsFatal");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of an error parser type cannot be null. ("+Name+")");
	if(ErrMsg  == null) throw new NullPointerException("Error message of an error parser type cannot be null. ("+Name+")");
	if(IsFatal != null) IsFatal = IsFatal.trim();
	return new ErrorParserType(Name, RegParser.compileRegParser($TPackage, Checker), ErrMsg.trim(), "true".equals(IsFatal));

#end def_kind;

// Simple ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Simple:

#Variables:
	var Checker;
	var Verifier;
	var Compiler;

#Constructor:
	// @Java: 
	import net.nawaman.regparser.*;
	import net.nawaman.regparser.typepackage.*;
	import net.nawaman.script.*;
	
	String Name     = (String)$Spec.getValue("Name");
	String Checker  = (String)$Spec.getValue("Checker");
	String Verifier = (String)$Spec.getValue("Verifier");
	String Compiler = (String)$Spec.getValue("Compiler");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of a simple parser type cannot be null. ("+Name+")");
	
	net.nawaman.regparser.RegParser             ParserCK = null;
	net.nawaman.regparser.types.CheckerProvider ParserGC = null;
	Object CkEn = null;	try { CkEn = net.nawaman.script.ScriptManager.GetEngineFromCode(Checker); } catch(RuntimeException RTE) {} 
	if(CkEn == null) ParserCK = net.nawaman.regparser.RegParser.compileRegParser($TPackage, Checker);
	else             ParserGC = new net.nawaman.regparser.typepackage.TPGetChecker($TPackage, Name, Checker);
	
	if((ParserCK == null) && (ParserGC == null)) throw new NullPointerException("Checker is not a valid RegParser. ("+Name+")");
	
	net.nawaman.regparser.typepackage.TPVerifier TheVerifier = (Verifier == null)?null:new net.nawaman.regparser.typepackage.TPVerifier($TPackage, Name, Verifier);
	net.nawaman.regparser.typepackage.TPCompiler TheCompiler = (Compiler == null)?null:new net.nawaman.regparser.typepackage.TPCompiler($TPackage, Name, Compiler);
	
	if(ParserCK != null) {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.SimpleParserType    (Name, ParserCK);
		else return new net.nawaman.regparser.types.ComposableParserType(Name, ParserCK, TheVerifier, TheCompiler);
	} else {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.SimpleParserType    (Name, ParserGC);
		else return new net.nawaman.regparser.types.ComposableParserType(Name, ParserGC, TheVerifier, TheCompiler);
	}

#end def_kind;



// Types *********************************************************************************

// EOL -------------------------------------------------------------------------
#def Simple parser EOL:

#Checker:
	!Spaces_Op!*[:NewLine:]

#end def parser;

// ClassName -------------------------------------------------------------------
#def Simple parser ClassName:

#Checker:
	($Name:!Identifier!) (!Spaces_Op! ($Name:~[:.:]~) !Spaces_Op! ($Name:!Identifier!))*

#Compiler:
	// @RegParser(Java):
	
	if($Result == null) return $Text;
	
	String[]      Names = $$$Name*$$;
	StringBuilder SB    = new StringBuilder();
	
	// Join
	for(int i = 0; i < Names.length; i++)
		SB.append(Names[i]);
		
	return SB.toString();

#end def parser;

// Spaces_Op -------------------------------------------------------------------
#def Simple parser Spaces_Op:

#Checker:
	// This is non-newline whitespace
	[[: :][:Tab:]]*

#end def parser;

// Spaces_Rq -------------------------------------------------------------------
#def Simple parser Spaces_Rq:

#Checker:
	// This is non-newline whitespace
	[[: :][:Tab:]]+

#end def parser;

// NameOfFile ------------------------------------------------------------------
#def Simple parser NameOfFile:

#Checker:
	([^[:/:][:\:]]*[[:/:][:\:]])*
	($EngineName:~(^[:.:]cls.{0})*~)[:.:]cls.{0}

#Compiler:
	// @RegParser(Java):
	return $$$EngineName$$;

#end def parser;

// Identifier ------------------------------------------------------------------
#def Simple parser Identifier:

#Checker:
	[a-zA-Z][a-zA-Z0-9_]*

#end def parser;

// End_Semicolon ---------------------------------------------------------------
#def Simple parser End_Semicolon:

#Checker:
	(
		!Spaces_Op!* [:;:] !Spaces_Op!* [:NewLine:] !Spaces_Op!*
		||
		($ERROR_Missing_semicolon:~[^.]{0}~)
	)

#end def parser;

// LanguageSpecFile ------------------------------------------------------------
#def Simple parser LanguageSpecFile:

#Checker:
	// @Java:
	import net.nawaman.regparser.*;
	
	String FileName = $Param;
	return RegParser.compileRegParser("( !SimpleLanguage_File(`"+FileName+"`)! || !ComplexLanguage_File(`"+FileName+"`)! )");

#Compiler:
	// @RegParser(Java):
	return @@[0]@@;

#end def parser;

// SimpleLanguage_File ---------------------------------------------------------
#def Simple parser SimpleLanguage_File:

#Checker:
	// This part is to be sure that this is a right kind of file
	(^##|[:NewLine:])* ##:Simple[:-:]Language !Spaces_Op! [:;:] (^##|[:NewLine:])* ##[:NewLine:]
	
	( ##:Engine !Spaces_Op! [:::] !Spaces_Op! ($EngineFileName:!Identifier!) !End_Semicolon! )?
	
	##:Parser !Spaces_Op! 
	(
		[:::] !Spaces_Op! ($ParserName:!ClassName!) !End_Semicolon! [:WhiteSpace:]*
		|
		[:{:] !EOL!
		(
			!Spaces_Op!
			(
				($ParserName:!ClassName!) !End_Semicolon!
				||		
				// Comment out
				[:/:][:/:][^[:NewLine:]]*[:NewLine:]
			)
		)*
		[:WhiteSpace:]*
		[:}:]
		[:WhiteSpace:]*
	)
	
	##:SubLang !Spaces_Op! [:{:] !EOL!
	(
		!Spaces_Op!
		(
			($SubLangName:!ClassName!) !End_Semicolon!
			||		
			// Comment out
			[:/:][:/:][^[:NewLine:]]*[:NewLine:]
		)
	)*
	[:WhiteSpace:]*
	[:}:]
	[:WhiteSpace:]*
	
	##:TextProcessor !Spaces_Op! [:{:] !EOL!
	(
		!Spaces_Op!
		(
			($TPName:~!Identifier!~) !Spaces_Op! [:::] !Spaces_Op! ($TPClass:!ClassName!) !End_Semicolon!
			||		
			// Comment out
			[:/:][:/:][^[:NewLine:]]*[:NewLine:]
		)
	)*
	[:WhiteSpace:]*
	[:}:]
	[:WhiteSpace:]*
	
	(
		[:WhiteSpace:]*
		|
		[:/:][:/:][^[:NewLine:]]*[:NewLine:]
		||
		($Error_Invalid_token[]:~.~)
	)*

#Compiler:
	// @RegParser(Java):
	import java.io.*;
	import net.nawaman.curry.*;
	import net.nawaman.curry.compiler.*;
	import net.nawaman.curry.compiler.EE_Language;
	import net.nawaman.regparser.*;
	import net.nawaman.regparser.typepackage.*;
	
	static String[] ToStrings(Object[] Objs) {
		String[] Ss = new String[(Objs == null) ? 0 : Objs.length];
		for(int i = 0; i < Ss.length; i++)
			Ss[i] = (Objs[i] == null) ? null : Objs[i].toString();
		
		return Ss;
	}
	
	static class MyGCL implements GetCurryLanguage {	
		ParserTypeProvider LangParser;
		String             LanguageName;
		String             SpecEngineName;
		String[]           SubLangNames;
		String[]           TPNames;
		String[]           TPClasss;
		MyGCL(ParserTypeProvider pLangParser, String pLanguageName, String pSpecEngineName, String[] pSubLangNames, String[] pTPNames, String[] pTPClasss) {
			this.LangParser     = pLangParser;
			this.LanguageName   = pLanguageName;
			this.SpecEngineName = pSpecEngineName;
			this.SubLangNames   = pSubLangNames;
			this.TPNames        = pTPNames;
			this.TPClasss       = pTPClasss;
		}
		public CurryLanguage getCurryLanguage(String LangName, String EngineName) {
			if(LangName       == null) LangName   = LanguageName;
			if(SpecEngineName != null) EngineName = SpecEngineName;
			
			CLRegParser CL = new CLRegParser(LangName, Engine.loadEngine(EngineName), LangParser);
			
			// Add Sub Language
			if((SubLangNames != null) && (SubLangNames.length != 0)) {
				for(int i = 0; i < SubLangNames.length; i++) {
					String SubLangName = SubLangNames[i];
					if(SubLangName == null) continue;
					CL.registerExecutableCreator(SubLangName);
				}
			}

			// Add Sub Language
			if((TPNames != null) && (TPNames.length != 0)) {
				for(int i = 0; i < TPNames.length; i++) {
					String TPName  = TPNames[i];
					String TPClass = TPClasss[i];
					if(TPName == null) continue;
					CL.registerTextProcessor(TPClass, TPName);
				}
			}
			
			EE_Language EELang = (EE_Language)CL.getTargetEngine().getExtension(EE_Language.Name);
			if(EELang != null) EELang.setDefaultLanguage(CL);
			
			return CL;
		}
	}
	
	// Get the Engine Name
	var FN = $Param;
	var PT = $TPackage.type("NameOfFile");
	var PR = PT.parse(FN);
	if(PR == null) {
		$CContext.reportError("Unable to extract language name from the parameter: `"+$Param+"`.", null		);
		return null;
	}
	final String LanguageName = (String)PT.compile(PR);
	
	// Engine file names
	String EName = $$$EngineFileName$$;
	File LF = new File($Param);
	File EF = new File(LF.getAbsoluteFile().getParentFile().getAbsolutePath() + "/" + EName + ".ces");
	final String SpecEngineName = (EF.exists() ? EF.getAbsolutePath() : null);
	
	// Parser names
	final String[]           ParserNames = ToStrings(@@$ParserName*@@);
	final ParserTypeProvider LangParser;	
	
	if((ParserNames == null) || (ParserNames.length == 0)) {
		LangParser = PTypePackage.Use(CurryLanguage.DEFAULT_LANGUAGE_NAME);
		
	} else if ((ParserNames.length == 1) && (ParserNames[0] != null)) {
		// Only one Parser Names
		LangParser = PTypePackage.Use(ParserNames[0]);
		
	} else {
		ParserTypeProvider[] Parsers = new ParserTypeProvider[(ParserNames == null) ? 0 : ParserNames.length];
		for(int i = 0; i < ParserNames.length; i++) {
			String PName = ParserNames[i];
			if((PName != null) || (PName.length() == 0)) continue;
			
			Parsers[i] = PTypePackage.Use(PName);
		}
		
		LangParser = new ParserTypeProvider.Library(Parsers);
	}
	
	final String[] SubLangNames = ToStrings(@@$SubLangName*@@);
	final String[] TPNames      = ToStrings(@@$TPName*@@);
	final String[] TPClasss     = ToStrings(@@$TPClass*@@);
		
	return new MyGCL(LangParser, LanguageName, SpecEngineName, SubLangNames, TPNames, TPClasss);

#end def parser;

// ComplexLanguage_File --------------------------------------------------------
#def Simple parser ComplexLanguage_File:

#Checker:
	// This part is to be sure that this is a right kind of file
	(^##|[:NewLine:])* ##:Complex[:-:]Language !Spaces_Op! [:;:] (^##|[:NewLine:])* ##[:NewLine:]
	
	// This part is to ensure that the executable is a function of nothing and return Engine
	($Code:~
		[^[:NewLine:][:{:]]*
		[:{:]
			!Spaces_Op!
			// Kind of executable `function`
			function !Spaces_Op!
			
			// Parameters
			[:(:] !Spaces_Op!
				!Identifier! !Spaces_Op! [:::] !Spaces_Op! String !Spaces_Op!
				[:,:] !Spaces_Op!
				!Identifier! !Spaces_Op! [:::] !Spaces_Op! String !Spaces_Op!
			[:):] !Spaces_Op!
						
			// Return type        `:net.nawaman.curry.script.CurryLanguage`
			[:::] !Spaces_Op! net[:.:]nawaman[:.:]curry[:.:]script[:.:]CurryLanguage
			!Spaces_Op!
		[:}:]
		.*
	~)

#Compiler:
	// @RegParser(Java):
	import net.nawaman.curry.compiler.*	;
	import net.nawaman.script.*;
	import net.nawaman.regparser.*;
	
	// Get the Engine Name
	var FN = $Param;
	var PT = $TPackage.type("NameOfFile");
	var PR = PT.parse(FN);
	if(PR == null) {
		$CContext.reportError("Unable to extract language name from the parameter: `"+$Param+"`.", null		);
		return null;
	}
	String LanguageName = (String)PT.compile(PR);
	
	Function F = null;
	try { F = (Function)Tools.Use($Param); }
	catch (Exception E) { throw new RuntimeException (E); }
	
	if((F == null) || !Signature.Simple.canAImplementsB(GetCurryLanguage.SIGNATURE_GET_CURRY_LANGUAGE, F.getSignature()))
		throw new IllegalArgumentException("The code `"+FN+"` does not contains CurryLanguage specification.");
	
	final Function Funct = F;
	
	// Returns as GetCurryLanguage
	return new GetCurryLanguage() {
		public @Override CurryLanguage getCurryLanguage(String LangName, String EngineName) {
			return (CurryLanguage)Funct.run(LangName, EngineName);
		}
	};

#end def parser;



// More Datas **************************************************************************

#def_data:

#Names:
	//These data list are for reference only
	data: ToFreeze = true:java.lang.Boolean;


#Bytes:
	ACED0005757200175B4C6A6176612E696F2E53657269616C697A61626C653BAED009AC53D7ED4902
	0000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D1030002
	46000A6C6F6164466163746F724900097468726573686F6C6478703F4000000000000C7708000000
	1000000001740008546F467265657A65737200116A6176612E6C616E672E426F6F6C65616ECD2072
	80D59CFAEE0200015A000576616C756578700178

#end def_data;

