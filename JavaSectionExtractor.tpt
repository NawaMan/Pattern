// @RegParserTypePackage: { function ():net.nawaman.regparser.typepackage.PTypePackage }

// TypePackage *************************************************************************************

// TypeKinds *****************************************************************************

// Error +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Error:

#Variables:
	var Checker;
	var ErrMessage;
	var IsFatal;

#Constructor:
	// @Java:
	import net.nawaman.regparser.*;
    import net.nawaman.regparser.types.*;
	import net.nawaman.regparser.typepackage.*;
	
	String Name    = (String)$Spec.getValue("Name");
	String Checker = (String)$Spec.getValue("Checker");
	String ErrMsg  = (String)$Spec.getValue("ErrMessage");
	String IsFatal = (String)$Spec.getValue("IsFatal");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of an error parser type cannot be null. ("+Name+")");
	if(ErrMsg  == null) throw new NullPointerException("Error message of an error parser type cannot be null. ("+Name+")");
	if(IsFatal != null) IsFatal = IsFatal.trim();
	return new PTError(Name, RegParser.newRegParser($TPackage, Checker), ErrMsg.trim(), "true".equals(IsFatal));

#end def_kind;

// Simple ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Simple:

#Variables:
	var Checker;
	var Verifier;
	var Compiler;

#Constructor:
	// @Java: 
	import net.nawaman.regparser.*;
	import net.nawaman.regparser.typepackage.*;
	import net.nawaman.script.*;
	
	String Name     = (String)$Spec.getValue("Name");
	String Checker  = (String)$Spec.getValue("Checker");
	String Verifier = (String)$Spec.getValue("Verifier");
	String Compiler = (String)$Spec.getValue("Compiler");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of a simple parser type cannot be null. ("+Name+")");
	
	net.nawaman.regparser.RegParser ParserCK = null;
	net.nawaman.regparser.RPGetChecker ParserGC = null;
	Object CkEn = null;	try { CkEn = net.nawaman.script.ScriptManager.GetEngineFromCode(Checker); } catch(RuntimeException RTE) {} 
	if(CkEn == null) ParserCK = net.nawaman.regparser.RegParser.newRegParser($TPackage, Checker);
	else             ParserGC = new net.nawaman.regparser.typepackage.TPGetChecker($TPackage, Name, Checker);
	
	if((ParserCK == null) && (ParserGC == null)) throw new NullPointerException("Checker is not a valid RegParser. ("+Name+")");
	
	net.nawaman.regparser.typepackage.TPVerifier TheVerifier = (Verifier == null)?null:new net.nawaman.regparser.typepackage.TPVerifier($TPackage, Name, Verifier);
	net.nawaman.regparser.typepackage.TPCompiler TheCompiler = (Compiler == null)?null:new net.nawaman.regparser.typepackage.TPCompiler($TPackage, Name, Compiler);
	
	if(ParserCK != null) {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.PTSimple(Name, ParserCK);
		else return new net.nawaman.regparser.types.PTComposable(Name, ParserCK, TheVerifier, TheCompiler);
	} else {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.PTSimple(Name, ParserGC);
		else return new net.nawaman.regparser.types.PTComposable(Name, ParserGC, TheVerifier, TheCompiler);
	}

#end def_kind;



// Types *********************************************************************************

// Block -----------------------------------------------------------------------
#def Simple parser Block:

#Checker:
	[:{:]
	(
		!Block!
		||(
		!Ignored!
		||(
		!Character!
		||(
		!String!
		||(
		[^[:}:]]
		))))
	)*
	[:}:]

#end def parser;

// Import ----------------------------------------------------------------------
#def Simple parser Import:

#Checker:
	import!Ignored!+
	(static!Ignored!+)?
	!Identifier!
	(
		!Ignored!*[:.:]!Ignored!*
		!Identifier!
	)*
	(!Ignored!*[:.:]!Ignored!*[:*:])?
	!Ignored!*[:;:]

#end def parser;

// String ----------------------------------------------------------------------
#def Simple parser String:

#Checker:
	[:":](($Chars[]:~[^[:":][:NewLine:]]~)|(#Escape:!CharacterEscape!))*[:":]

#Compiler:
	// @RegParser(Java):
	if($Result == null) return "";

	// Short string
	StringBuffer SB = new StringBuffer();
	int Count = $Result.entryCount();
	for(int i = 0; i < Count; i++) {
		String Name = ~~[i]~~;
		if("$Chars[]".equals(Name)) {
			SB.append($$[i]$$);

		} else if("#Escape".equals(Name)) {
			SB.append(@@[i]@@);

		}
	}

	return SB.toString();

#end def parser;

// Ignored ---------------------------------------------------------------------
#def Simple parser Ignored:

#Checker:
	(
		[:WhiteSpace:]+
		||
		!Comment!
	)

#end def parser;

// Comment ---------------------------------------------------------------------
#def Simple parser Comment:

#Checker:
	(
		[:/:][:/:][^[:NewLine:]]*[:NewLine:]?
		|
		[:/:][:*:](^[:*:][:/:])*([:*:][:/:]|($Err_UnclosedComment:~.{0}~))
	)

#Compiler:
	// @RegParser(Java):
	final String WhiteSpace = " \t\n\r\f\b";
	
	char[] New = new char[$Text.length()];
	for(int i = $Text.length(); --i >= 0; ) {
		char C = $Text.charAt(i);
		if(WhiteSpace.indexOf(C) == -1) New[i] = ' ';
		else                            New[i] =   C;
	}
	return new String(New);

#end def parser;

// NewArray --------------------------------------------------------------------
#def Simple parser NewArray:

#Checker:
	new!Ignored!*(!Identifier!|[:.:]|[:<:]|[:>:]|!Ignored!*)*[:[:]!Ignored!*[:]:]!Ignored!*!Block!

#end def parser;

// Elements --------------------------------------------------------------------
#def Simple parser Elements:

#Checker:
	(private|static|public)!Ignored!+
	(
		!NewArray!
		||(
		!Ignored!
		||(
		!Character!
		||(
		!String!
		||(
		[^[:{:][:;:]]
		))))
	)*
	(
		!Block!
		|
		[:;:]
	)

#end def parser;

// Character -------------------------------------------------------------------
#def Simple parser Character:

#Checker:
	[:':](($Char:~[^[:':][:NewLine:]]~)|(#Escape:!CharacterEscape!))[:':]

#Compiler:
	// @RegParser(Java):
	if($$$Char$$   != null) return $$$Char$$.charAt(0);
	if($$#Escape$$ != null) return @@#Escape@@;
	return $Text;

#end def parser;

// Identifier ------------------------------------------------------------------
#def Simple parser Identifier:

#Checker:
	[a-zA-Z_$][a-zA-Z_$0-9]*

#end def parser;

// JavaSections ----------------------------------------------------------------
#def Simple parser JavaSections:

#Checker:
	($Imports:~(!Ignored!*!Import!)*~)
	($Elements:~(!Ignored!*!Elements!)*~)
	($Bodys:~.*~)

#Compiler:
	// @RegParser(Java):
	return new int[] { ::$Elements::, ::$Bodys:: };

#end def parser;

// CharacterEscape -------------------------------------------------------------
#def Simple parser CharacterEscape:

#Checker:
	[:\:](
		0(
			[0-3][0-7][0-7]
			|| (
				[0-7][0-7]
				||
				[0-7]
			)
		)
		|
		[xX][0-9a-fA-F]{2}
		|
		[uU][0-9a-fA-F]{4}
		|
		[[:\:][:":][:':]tnrbf]
		||
		($ERROR_Invalid_Escape_Character:~.~)
	)

#Compiler:
	// @RegParser(Java):
	char F = $Text.toLowerCase().charAt(1);
	switch(F) {
		case '0':  return (char)Integer.parseInt($Text.substring(2, $Text.length()), 8);
		case 'x':  return (char)Integer.parseInt($Text.substring(2, $Text.length()), 16);
		case 'u':  return (char)Integer.parseInt($Text.substring(2, $Text.length()), 16);
		case '\\': return '\\';
		case '\"': return '\"';
		case '\'': return '\'';
		case 't':  return '\t';
		case 'n':  return '\n';
		case 'r':  return '\r';
		case 'b':  return '\b';
		case 'f':  return '\f';
	}
	if($$$Err_InvalidEscape$$ != null) return @@$Err_InvalidEscape@@;
	return null;

#end def parser;



// More Datas **************************************************************************

#def_data:

#Names:
	//These data list are for reference only
	data: ToFreeze = true:java.lang.Boolean;


#Bytes:
	ACED0005757200175B4C6A6176612E696F2E53657269616C697A61626C653BAED009AC53D7ED4902
	0000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D1030002
	46000A6C6F6164466163746F724900097468726573686F6C6478703F4000000000000C7708000000
	1000000001740008546F467265657A65737200116A6176612E6C616E672E426F6F6C65616ECD2072
	80D59CFAEE0200015A000576616C756578700178

#end def_data;

