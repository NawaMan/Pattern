// @RegParserTypePackage: { function ():net.nawaman.regparser.typepackage.PTypePackage }

// TypePackage *************************************************************************************

// TypeKinds *****************************************************************************

// Error +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Error:

#Variables:
	var Checker;
	var ErrMessage;
	var IsFatal;

#Constructor:
	// @Java:
	import net.nawaman.regparser.*;
    import net.nawaman.regparser.types.*;
	import net.nawaman.regparser.typepackage.*;
	
	String Name    = (String)$Spec.getValue("Name");
	String Checker = (String)$Spec.getValue("Checker");
	String ErrMsg  = (String)$Spec.getValue("ErrMessage");
	String IsFatal = (String)$Spec.getValue("IsFatal");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of an error parser type cannot be null. ("+Name+")");
	if(ErrMsg  == null) throw new NullPointerException("Error message of an error parser type cannot be null. ("+Name+")");
	if(IsFatal != null) IsFatal = IsFatal.trim();
	return new PTError(Name, RegParser.newRegParser($TPackage, Checker), ErrMsg.trim(), "true".equals(IsFatal));

#end def_kind;

// Simple ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#def_kind Simple:

#Variables:
	var Checker;
	var Verifier;
	var Compiler;

#Constructor:
	// @Java: 
	import net.nawaman.regparser.*;
	import net.nawaman.regparser.typepackage.*;
	import net.nawaman.script.*;
	
	String Name     = (String)$Spec.getValue("Name");
	String Checker  = (String)$Spec.getValue("Checker");
	String Verifier = (String)$Spec.getValue("Verifier");
	String Compiler = (String)$Spec.getValue("Compiler");
	
	if(Name    == null) throw new NullPointerException("Parser type name cannot be null.");
	if(Checker == null) throw new NullPointerException("Checker of a simple parser type cannot be null. ("+Name+")");
	
	net.nawaman.regparser.RegParser ParserCK = null;
	net.nawaman.regparser.RPGetChecker ParserGC = null;
	Object CkEn = null;	try { CkEn = net.nawaman.script.ScriptManager.GetEngineFromCode(Checker); } catch(RuntimeException RTE) {} 
	if(CkEn == null) ParserCK = net.nawaman.regparser.RegParser.newRegParser($TPackage, Checker);
	else             ParserGC = new net.nawaman.regparser.typepackage.TPGetChecker($TPackage, Name, Checker);
	
	if((ParserCK == null) && (ParserGC == null)) throw new NullPointerException("Checker is not a valid RegParser. ("+Name+")");
	
	net.nawaman.regparser.typepackage.TPVerifier TheVerifier = (Verifier == null)?null:new net.nawaman.regparser.typepackage.TPVerifier($TPackage, Name, Verifier);
	net.nawaman.regparser.typepackage.TPCompiler TheCompiler = (Compiler == null)?null:new net.nawaman.regparser.typepackage.TPCompiler($TPackage, Name, Compiler);
	
	if(ParserCK != null) {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.PTSimple(Name, ParserCK);
		else return new net.nawaman.regparser.types.PTComposable(Name, ParserCK, TheVerifier, TheCompiler);
	} else {
		if((TheVerifier == null) && (TheCompiler == null))
			 return new net.nawaman.regparser.types.PTSimple(Name, ParserGC);
		else return new net.nawaman.regparser.types.PTComposable(Name, ParserGC, TheVerifier, TheCompiler);
	}

#end def_kind;



// Types *********************************************************************************

// EOL -------------------------------------------------------------------------
#def Simple parser EOL:

#Checker:
	!Spaces_Op!*[:NewLine:]

#end def parser;

// Ignored ---------------------------------------------------------------------
#def Simple parser Ignored:

#Checker:
	(
		[:WhiteSpace:]
		||
		[:NewLine:]
		||
		[:/:][:/:][^[:NewLine:]]*[:NewLine:]
		||
		[:(:][:*:](^[:*:][:):])*[:*:][:):]
	)

#end def parser;

// Spaces_Op -------------------------------------------------------------------
#def Simple parser Spaces_Op:

#Checker:
	// This is non-newline whitespace
	[[: :][:Tab:]]*

#end def parser;

// Spaces_Rq -------------------------------------------------------------------
#def Simple parser Spaces_Rq:

#Checker:
	// This is non-newline whitespace
	[[: :][:Tab:]]+

#end def parser;

// Identifier ------------------------------------------------------------------
#def Simple parser Identifier:

#Checker:
	[a-zA-Z][a-zA-Z0-9]*

#end def parser;

// CompileData -----------------------------------------------------------------
#def Simple parser CompileData:

#Checker:
	($CompileData:~[^.]{0}~)
	[:NewLine:]
	[:/:][:*:]*[:NewLine:]
	($StartCStr:~[^.]{0}~)
	##:COMPILED::BASE64[: :][:{:][:NewLine:]
	($BASE64:~([a-zA-Z0-9[:+:][:/:][:=:]]*[:NewLine:])*~)
	[:}:]($EndCStr:~[^.]{0}~)[:NewLine:]
	##:HASHES:0x[:Blank:]*($HASH1:~ [A-F0-9]*~)[:-:]0x[:Blank:]*($HASH2:~ [A-F0-9]*~)[:;:][:NewLine:]
	##:COUNTS:0x[:Blank:]*($COUNT1:~[A-F0-9]*~)[:-:]0x[:Blank:]*($COUNT2:~[A-F0-9]*~)[:;:][:NewLine:]
	[:*:]*[:/:]

#end def parser;

// WildCardPath ----------------------------------------------------------------
#def Simple parser WildCardPath:

#Checker:
	(
		   ($QuestionMark:~  [:?:]                                                          ~)
		|| ($Tilde:~         [:~:]                                                          ~)
		|| ($DoubleAsterisk:~[:*:][:*:]                                                     ~)
		|| ($Asterisk:~      [:*:][:*:]{0}                                                  ~)
		|| (#Replace:~       [:[:][:Blank:]*[:#:][:Blank:]*($Number:~[0-9]+~)[:Blank:]*[:]:]~)
		|| ($Others[]:~      [:Word:]                                                       ~)
		|| ($Puntuation:~    [^[:;:]]                                                       ~)
	)+

#Compiler:
	// @RegParser(Java):
	import net.nawaman.regparser.*;
	StringBuilder SB = new StringBuilder();
	
	if($Result == null) return $Text;
	
	int Count = $Result.entryCount();
	for(int i = 0; i < Count; i++) {
		char Kind = ~~[i]~~.charAt(1);	// The 0th is '$'
		switch(Kind) {
			case 'Q': SB.append(".");                                                         break;
			case 'O': SB.append($$[i]$$);                                                     break;
			case 'P': SB.append("[:").append($$[i]$$).append(":]");                           break;
			case 'D': SB.append(".*");                   if(i != (Count - 1)) SB.append("*"); break;
			case 'T': SB.append("[^[:/:][:\\:]     ]*"); if(i != (Count - 1)) SB.append("*"); break;
			case 'A': SB.append("[^[:/:][:\\:][:.:]]*"); if(i != (Count - 1)) SB.append("*"); break;
			case 'R': SB.append("%").append(##[i]##->$$$Number$$).append("$s");
		}
	}
	SB.append(".{0}");
	
	return SB.toString();

#end def parser;

// UnitDescFile ----------------------------------------------------------------
#def Simple parser UnitDescFile:

#Checker:
	($Code:~
		(^!CompileData!)*
		~:~
		// This part is to be sure that this is a right kind of file
		(^##|[:NewLine:])* ##:[uU][nN][iI][tT] !Spaces_Op! [:;:] (^##|[:NewLine:])* ##[:NewLine:]
	
		!Ignored!*
	
		(#Define*:~
			(
				##:Define !Spaces_Rq! # !Spaces_Op! ($Number:~[0-9]+~) !Spaces_Op! : !Spaces_Op! (#Text:!Literal_String!)
				!End_Semicolon! [:WhiteSpace:]*
				||
				($ERROR_Invalid_define_text:~([:#:]#:Includeds){0}[^;]+~)
			)
			!Ignored!*
		~)*
	
		##:Includeds !Spaces_Op! [:{:] !EOL!
		(
			!Ignored!*
			($IncludedPath:~
				[^;[:}:]]+!End_Semicolon! !Ignored!*
				~:~
				(
					(#IncludedPath:!WildCardPath!)!End_Semicolon!
					||
					($ERROR_Invalid_include_path:~.*~)
				)		
			~)
		)*
		[:}:]

	~)
	
	(
		($EndText:~[^.]{0}~)
		(#CompileData*:!CompileData!)
	)?

#Compiler:
	// @RegParser(Java):
	import java.util.Vector;
	import net.nawaman.script.Tools;	
	
	// Checks if the UnitDescription file is up-to-date ----------------------------------------------------------------
	boolean IsUpToDate = false;
	
	if($$$CompileData$$ != null) {
		int TextLength_0 = ::$EndText::;
		int TextLength_1 = Integer.parseInt($$$COUNT1$$, 16);
		
		if((TextLength_0 == TextLength_1)) {
			int CStrLength_0 = ::$EndCStr:: - ::$StartCStr:: + 1;	// +1 is for '\n' See net/nawaman/script/Tools.java for <Tools:415>
			int CStrLength_1 = Integer.parseInt($$$COUNT2$$, 16);
			
			if(CStrLength_0 == CStrLength_1) {
				int TextHash_0 = Integer.parseInt(Tools.GetHashText($Text.substring(0, TextLength_0)).trim(), 16);
				int TextHash_1 = Integer.parseInt($$$HASH1$$, 16);
				
				if(TextHash_0 == TextHash_1) {
					int CStrHash_0 = Integer.parseInt(Tools.GetHashText($Text.substring(::$StartCStr::, ::$EndCStr::)).trim(), 16);
					int CStrHash_1 = Integer.parseInt($$$HASH2$$, 16);
					
					if(CStrHash_0 == CStrHash_1) IsUpToDate = true;
				}
			}
		}
	}
	
	// The code --------------------------------------------------------------------------------------------------------
	
	String Code = $Text;			
	if($$$EndText$$ != null) Code = $Text.substring(0, ::$EndText::);
	
	// Process the code itself -----------------------------------------------------------------------------------------
	String[] DefNames     = $$$Number*$$;
	Object[] DefTexts     = @@#Text*@@;
	Object[] PathPatterns = @@#IncludedPath*@@;
	
	// Ensure the define number is wel-formed
	for(int i = 1; i <= ((DefNames == null) ? 0 : DefNames.length); i++) {
		int Num = Integer.parseInt(DefNames[i - 1]);
		if(Num == i) continue;
		
		System.err.println("Invalid define numbering. It must starts from one and increase by one.");
		return null;
	}
	
	Vector<String> Patterns = new Vector<String>();
	// Format the pattern
	if(PathPatterns != null) {
		for(int p = 0; p < PathPatterns.length; p++) {
			Object PObj = PathPatterns[p];
			if(PObj == null) continue;
		
			String Pattern = PObj.toString();
			if(Pattern.length() == 0) continue;
		
			Patterns.add(String.format(Pattern, (Object[])DefTexts));
		}
	}
	
	return new Object[] { Code, Patterns.toArray(new String[Patterns.size()]), IsUpToDate, $$$BASE64$$, $$$HASH1$$};

#end def parser;

// End_Semicolon ---------------------------------------------------------------
#def Simple parser End_Semicolon:

#Checker:
	(
		!Spaces_Op!* [:;:] !Spaces_Op!* [:NewLine:] !Spaces_Op!*
		||
		($ERROR_Missing_semicolon:~[^.]{0}~)
	)

#end def parser;

// Literal_String --------------------------------------------------------------
#def Simple parser Literal_String:

#Checker:
	(
		[:":](($Chars[]:~[^[:":][:NewLine:]]~)|(#EscapeChr:!Literal_Char_Escape!))*
		([:":] || ($ERROR_Missing_the_closing_quatation_mark:~[^.]{0}~))
		|
		[:`:](($Chars[]:~[^[:`:][:NewLine:]]~)|(#EscapeChr:!Literal_Char_Escape!))*
		([:`:] || ($ERROR_Missing_the_closing_quatation_mark:~[^.]{0}~))
	)

#Compiler:
	// @RegParser(Java):
	
	// Empty String
	if($Result == null) return "";
	
	// Check for error
	if(($Result != null) && !$Result.ensureNoError($TPackage, $CContext)) return null;
	
	// Short string
	StringBuffer SB = new StringBuffer();
	int Count = $Result.entryCount();
	for(int i = 0; i < Count; i++) {
		String Name = $Result.nameOf(i);
		if("$Chars[]".equals(Name)) {
			SB.append($$[i]$$			);

		} else if("#EscapeChr".equals(Name)) {
			SB.append(@@[i]@@);
		}
	}

	return SB.toString();

#end def parser;

// Literal_Char_Escape ---------------------------------------------------------
#def Simple parser Literal_Char_Escape:

#Checker:
	[:\:](
		0(
			[0-3][0-7][0-7]
			|| (
				[0-7][0-7]
				||
				[0-7]
			)
		)
		|
		[xX][0-9a-fA-F]{2		}
		|
		[uU][0-9a-fA-F]{4}
		|
		[[:\:][:":][:':]tnrbf]
		||
		($ERROR_Invalid_Escape_Character:~.~)
	)

#Compiler:
	// @RegParser(Java):
	
	// Check for error
	if(($Result != null) && !$Result.ensureNoError($TPackage, $CContext)) return null;
	
	char F = $Text.toLowerCase().charAt(1);
	switch(F) {
		case  '0': return (char)Integer.parseInt($Text.substring(2),  8);
		case  'x': return (char)Integer.parseInt($Text.substring(2), 16);
		case  'u': return (char)Integer.parseInt($Text.substring(2), 16);
		case '\\': return '\\';
		case '\"': return '\"';
		case '\'': return '\'';
		case  't': return '\t';
		case  'n': return '\n';
		case  'r': return '\r';
		case  'b': return '\b';
		case  'f': return '\f';
		default: {
			String Location = ($Result == null)?"":"near " + $Result.locationOf(0);
			$CContext.reportError("Invalid Escape Character (" + $Text + ") <Util_Literal:28> "+Location, null);
			return null;
		}
	}

#end def parser;



// More Datas **************************************************************************

#def_data:

#Names:
	//These data list are for reference only
	data: ToFreeze = true:java.lang.Boolean;


#Bytes:
	ACED0005757200175B4C6A6176612E696F2E53657269616C697A61626C653BAED009AC53D7ED4902
	0000787000000001737200116A6176612E7574696C2E486173684D61700507DAC1C31660D1030002
	46000A6C6F6164466163746F724900097468726573686F6C6478703F4000000000000C7708000000
	1000000001740008546F467265657A65737200116A6176612E6C616E672E426F6F6C65616ECD2072
	80D59CFAEE0200015A000576616C756578700178

#end def_data;



/*******************************************************************************
##:COMPILED::BASE64 {
rO0ABXc6ADZuZXQubmF3YW1hbi5yZWdwYXJzZXIudHlwZXBhY2thZ2UuVFBhY2thZ2VTY3JpcHRF
bmdpbmUAAHVyAAJbQqzzF/gGCFTgAgAAeHAAANrdrO0ABXcZAApKQ08tTkVFREVEAANKQ08AAABk
AAAAAHVyAAJbQqzzF/gGCFTgAgAAeHAAAAAErO0ABXVxAH4AAAAA2pms7QAFc3IATW5ldC5uYXdh
bWFuLnJlZ3BhcnNlci50eXBlcGFja2FnZS5UUGFja2FnZVNjcmlwdEVuZ2luZSRHZXRUeXBlUGFj
a2FnZUZ1bmN0aW9uohfXNL/nl58DAAB4cHoAAAQArO0ABXNyAC5uZXQubmF3YW1hbi5yZWdwYXJz
ZXIudHlwZXBhY2thZ2UuUFR5cGVQYWNrYWdlcXD2kL7+cB4DAAhaAAhJc0Zyb3plblsADEJ1ZmZl
clRvU2F2ZXQAAltCTAAKQ2xhc3NQYXRoc3QAEkxqYXZhL3V0aWwvVmVjdG9yO0wACUVycm9yTXNn
c3QAE0xqYXZhL3V0aWwvVHJlZU1hcDtMAAZLRGF0YXNxAH4AA0wACU1vcmVEYXRhc3QAE0xqYXZh
L3V0aWwvSGFzaE1hcDtMAAdQTlR5cGVzcQB+AANMAAZUU3BlY3NxAH4AA3hwAHBwcHNyABFqYXZh
LnV0aWwuVHJlZU1hcAzB9j4tJWrmAwABTAAKY29tcGFyYXRvcnQAFkxqYXZhL3V0aWwvQ29tcGFy
YXRvcjt4cHB3BAAAAAJ0AAVFcnJvcnNyAC1uZXQubmF3YW1hbi5yZWdwYXJzZXIudHlwZXBhY2th
Z2UuUFRLaW5kJERhdGGcUbe0iaTabAIAA1sACURhdGFOYW1lc3QAE1tMamF2YS9sYW5nL1N0cmlu
ZztMAAROYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7TAAIVHlwZUNvZGVxAH4ADHhwdXIAE1tMamF2
YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAA3QAB0NoZWNrZXJ0AApFcnJNZXNzYWdldAAH
SXNGYXRhbHEAfgAJdAM9CS8vIEBKYXZhOgoJaW1wb3J0IG5ldC5uYXdhbWFuLnJlZ3BhcnNlci4q
OwogICAgaW1wb3J0IG5ldC5uYXdhbWFuLnJlZ3BhcnNlci50eXBlcy4qOwoJaW1wb3J0IG5ldC5u
YXdhbWFuLnJlZ3BhcnNlci50eXBlcGFja2FnZS4qOwoJCglTdHJpbmcgTmFtZSAgICA9IChTdHJp
bmcpJFNwZWMuZ2V0VmFsdWUoIk5hbWUiKTsKCVN0cmluZyBDaGVja2VyID0gKFN0cmluZykkU3Bl
Yy5nZXRWYWx1ZSgiQ2hlY2tlciIpOwoJU3RyaW5nIEVyck1zZyAgPSAoU3RyaW5nKSRTcGVjLmdl
dFZhbHVlKCJFcnJNZXNzYWdlIik7CglTdHJpbmcgSXNGYXRhbCA9IChTdHJpbmcpJFNwZWMuZ2V0
VmFsdWUoIklzRmF0YWwiKTsKCQoJaWYoTmFtZSAgICA9PSBudWxsKSB0aHJvdyBuZXcgTnVsbFBv
aW50ZXJFeGNlcHRpb24oIlBhcnNlciB0eXBlIG5hbWUgY2Fubm90IGJlIG51bGwuIik7CglpZihD
aGVja2VyID09IG51bGwpIHRocm93IG5ldyBOdXoAAAQAbGxQb2ludGVyRXhjZXB0aW9uKCJDaGVj
a2VyIG9mIGFuIGVycm9yIHBhcnNlciB0eXBlIGNhbm5vdCBiZSBudWxsLiAoIitOYW1lKyIpIik7
CglpZihFcnJNc2cgID09IG51bGwpIHRocm93IG5ldyBOdWxsUG9pbnRlckV4Y2VwdGlvbigiRXJy
b3IgbWVzc2FnZSBvZiBhbiBlcnJvciBwYXJzZXIgdHlwZSBjYW5ub3QgYmUgbnVsbC4gKCIrTmFt
ZSsiKSIpOwoJaWYoSXNGYXRhbCAhPSBudWxsKSBJc0ZhdGFsID0gSXNGYXRhbC50cmltKCk7Cgly
ZXR1cm4gbmV3IFBURXJyb3IoTmFtZSwgUmVnUGFyc2VyLm5ld1JlZ1BhcnNlcigkVFBhY2thZ2Us
IENoZWNrZXIpLCBFcnJNc2cudHJpbSgpLCAidHJ1ZSIuZXF1YWxzKElzRmF0YWwpKTsKdAAGU2lt
cGxlc3EAfgAKdXEAfgAOAAAAA3QAB0NoZWNrZXJ0AAhWZXJpZmllcnQACENvbXBpbGVycQB+ABR0
B34JLy8gQEphdmE6IAoJaW1wb3J0IG5ldC5uYXdhbWFuLnJlZ3BhcnNlci4qOwoJaW1wb3J0IG5l
dC5uYXdhbWFuLnJlZ3BhcnNlci50eXBlcGFja2FnZS4qOwoJaW1wb3J0IG5ldC5uYXdhbWFuLnNj
cmlwdC4qOwoJCglTdHJpbmcgTmFtZSAgICAgPSAoU3RyaW5nKSRTcGVjLmdldFZhbHVlKCJOYW1l
Iik7CglTdHJpbmcgQ2hlY2tlciAgPSAoU3RyaW5nKSRTcGVjLmdldFZhbHVlKCJDaGVja2VyIik7
CglTdHJpbmcgVmVyaWZpZXIgPSAoU3RyaW5nKSRTcGVjLmdldFZhbHVlKCJWZXJpZmllciIpOwoJ
U3RyaW5nIENvbXBpbGVyID0gKFN0cmluZykkU3BlYy5nZXRWYWx1ZSgiQ29tcGlsZXIiKTsKCQoJ
aWYoTmFtZSAgICA9PSBudWxsKSB0aHJvdyBuZXcgTnVsbFBvaW50ZXJFeGNlcHRpb24oIlBhcnNl
ciB0eXBlIG5hbWUgY2Fubm90IGJlIG51bGwuIik7CglpZihDaGVja2VyID09IG51bGwpIHRocm93
IG5ldyBOdWxsUG9pbnRlckV4Y2VwdGlvbigiQ2hlY2tlciBvZiBhIHNpbXBsZSBwYXJzZXIgdHlw
ZSBjYW5ub3QgYmUgbnVsbC4gKCIrTmFtZSsiKSIpOwoJCgluZXQubmF3YW1hbi5yZWdwYXJzZXIu
UmVnUGFyc2VyIFBhcnNlckNLID0gbnVsbDsKCW5ldHoAAAQALm5hd2FtYW4ucmVncGFyc2VyLlJQ
R2V0Q2hlY2tlciBQYXJzZXJHQyA9IG51bGw7CglPYmplY3QgQ2tFbiA9IG51bGw7CXRyeSB7IENr
RW4gPSBuZXQubmF3YW1hbi5zY3JpcHQuU2NyaXB0TWFuYWdlci5HZXRFbmdpbmVGcm9tQ29kZShD
aGVja2VyKTsgfSBjYXRjaChSdW50aW1lRXhjZXB0aW9uIFJURSkge30gCglpZihDa0VuID09IG51
bGwpIFBhcnNlckNLID0gbmV0Lm5hd2FtYW4ucmVncGFyc2VyLlJlZ1BhcnNlci5uZXdSZWdQYXJz
ZXIoJFRQYWNrYWdlLCBDaGVja2VyKTsKCWVsc2UgICAgICAgICAgICAgUGFyc2VyR0MgPSBuZXcg
bmV0Lm5hd2FtYW4ucmVncGFyc2VyLnR5cGVwYWNrYWdlLlRQR2V0Q2hlY2tlcigkVFBhY2thZ2Us
IE5hbWUsIENoZWNrZXIpOwoJCglpZigoUGFyc2VyQ0sgPT0gbnVsbCkgJiYgKFBhcnNlckdDID09
IG51bGwpKSB0aHJvdyBuZXcgTnVsbFBvaW50ZXJFeGNlcHRpb24oIkNoZWNrZXIgaXMgbm90IGEg
dmFsaWQgUmVnUGFyc2VyLiAoIitOYW1lKyIpIik7CgkKCW5ldC5uYXdhbWFuLnJlZ3BhcnNlci50
eXBlcGFja2FnZS5UUFZlcmlmaWVyIFRoZVZlcmlmaWVyID0gKFZlcmlmaWVyID09IG51bGwpP251
bGw6bmV3IG5ldC5uYXdhbWFuLnJlZ3BhcnNlci50eXBlcGFja2FnZS5UUFZlcmlmaWVyKCRUUGFj
a2FnZSwgTmFtZSwgVmVyaWZpZXIpOwoJbmV0Lm5hd2FtYW4ucmVncGFyc2VyLnR5cGVwYWNrYWdl
LlRQQ29tcGlsZXIgVGhlQ29tcGlsZXIgPSAoQ29tcGlsZXIgPT0gbnVsbCk/bnVsbDpuZXcgbmV0
Lm5hd2FtYW4ucmVncGFyc2VyLnR5cGVwYWNrYWdlLlRQQ29tcGlsZXIoJFRQYWNrYWdlLCBOYW1l
LCBDb21waWxlcik7CgkKCWlmKFBhcnNlckNLICE9IG51bGwpIHsKCQlpZigoVGhlVmVyaWZpZXIg
PT0gbnVsbCkgJiYgKFRoZUNvbXBpbGVyID09IG51bGwpKQoJCQkgcmV0dXJuIG5ldyBuZXQubmF3
YW1hbi5yZWdwYXJzZXIudHlwZXMuUFRTaW1wbGUoTmFtZSwgUGFyc2VyQ0spOwoJCWVsc2UgcmV0
dXJuIG5ldyBuZXQubmF3YW1hbi5yZWdwYXJzZXIudHlwZXoAAAQAcy5QVENvbXBvc2FibGUoTmFt
ZSwgUGFyc2VyQ0ssIFRoZVZlcmlmaWVyLCBUaGVDb21waWxlcik7Cgl9IGVsc2UgewoJCWlmKChU
aGVWZXJpZmllciA9PSBudWxsKSAmJiAoVGhlQ29tcGlsZXIgPT0gbnVsbCkpCgkJCSByZXR1cm4g
bmV3IG5ldC5uYXdhbWFuLnJlZ3BhcnNlci50eXBlcy5QVFNpbXBsZShOYW1lLCBQYXJzZXJHQyk7
CgkJZWxzZSByZXR1cm4gbmV3IG5ldC5uYXdhbWFuLnJlZ3BhcnNlci50eXBlcy5QVENvbXBvc2Fi
bGUoTmFtZSwgUGFyc2VyR0MsIFRoZVZlcmlmaWVyLCBUaGVDb21waWxlcik7Cgl9CnhzcgARamF2
YS51dGlsLkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAA
AAAMdwgAAAAQAAAAAXQACFRvRnJlZXplc3IAEWphdmEubGFuZy5Cb29sZWFuzSBygNWc+u4CAAFa
AAV2YWx1ZXhwAXhwc3EAfgAGcHcEAAAAC3QAC0NvbXBpbGVEYXRhc3IAKG5ldC5uYXdhbWFuLnJl
Z3BhcnNlci50eXBlcGFja2FnZS5QVFNwZWOMmGbg7F1TwgIAAUwABURhdGFzcQB+AAR4cHNxAH4A
Gz9AAAAAAAAMdwgAAAAQAAAABXEAfgAZcHEAfgAXdAGvKCRDb21waWxlRGF0YTp+W14uXXswfX4p
CglbOk5ld0xpbmU6XQoJWzovOl1bOio6XSpbOk5ld0xpbmU6XQoJKCRTdGFydENTdHI6flteLl17
MH1+KQoJIyM6Q09NUElMRUQ6OkJBU0U2NFs6IDpdWzp7Ol1bOk5ld0xpbmU6XQoJKCRCQVNFNjQ6
fihbYS16QS1aMC05WzorOl1bOi86XVs6PTpdXSpbOk5ld0xpbmU6XSkqfikKCVs6fTpdKCRFbmRD
U3RyOn5bXi5dezB9filbOk5ld0xpbmU6XQoJIyM6SEFTSEVTOjB4WzpCbGFuazpdKigkSEFTSDE6
fiBbQS1GMC05XSp+KVs6LTpdMHhbOkJsYW5rOl0qKCRIQVNIMjp+IFtBLUYwLTldKn4pWzo7Ol1b
Ok5ld0xpbmU6XQoJIyM6Q09VTlRTOjB4WzpCbGFuazpdKigkQ09VTlQxOn5bQS1GMC05XSp+KVs6
LTpdMHhbOkJsYW5rOl0qKCRDT1VOVDI6fltBLUYwLTldKn4pWzo7Ol1bOk5ld0xpbmU6XQoJWzoq
Ol0qWzovOl10AARLaW5kcQB+ABRxAH4AGHB0AAROYW1lcQB+AHoAAAQAIXh0AANFT0xzcQB+ACJz
cQB+ABs/QAAAAAAADHcIAAAAEAAAAAVxAH4AGXBxAH4AF3QAFyFTcGFjZXNfT3AhKls6TmV3TGlu
ZTpdcQB+ACZxAH4AFHEAfgAYcHEAfgAncQB+ACh4dAANRW5kX1NlbWljb2xvbnNxAH4AInNxAH4A
Gz9AAAAAAAAMdwgAAAAQAAAABXEAfgAZcHEAfgAXdABrKAoJCSFTcGFjZXNfT3AhKiBbOjs6XSAh
U3BhY2VzX09wISogWzpOZXdMaW5lOl0gIVNwYWNlc19PcCEqCgkJfHwKCQkoJEVSUk9SX01pc3Np
bmdfc2VtaWNvbG9uOn5bXi5dezB9fikKCSlxAH4AJnEAfgAUcQB+ABhwcQB+ACdxAH4ALHh0AApJ
ZGVudGlmaWVyc3EAfgAic3EAfgAbP0AAAAAAAAx3CAAAABAAAAAFcQB+ABlwcQB+ABd0ABRbYS16
QS1aXVthLXpBLVowLTldKnEAfgAmcQB+ABRxAH4AGHBxAH4AJ3EAfgAweHQAB0lnbm9yZWRzcQB+
ACJzcQB+ABs/QAAAAAAADHcIAAAAEAAAAAVxAH4AGXBxAH4AF3QAfigKCQlbOldoaXRlU3BhY2U6
XQoJCXx8CgkJWzpOZXdMaW5lOl0KCQl8fAoJCVs6LzpdWzovOl1bXls6TmV3TGluZTpdXSpbOk5l
d0xpbmU6XQoJCXx8CgkJWzooOl1bOio6XSheWzoqOl1bOik6XSkqWzoqOl1bOik6XQoJKXEAfgAm
cQB+ABRxAH4AGHBxAH4AJ3EAfgA0eHQAE0xpdGVyYWxfQ2hhcl9Fc2NhcGVzcQB+ACJzcQB+ABs/
QAAAAAAADHcIAAAAEAAAAAVxAH4AGXQDKS8vIEBSZWdQYXJzZXIoSmF2YSk6CgkKCS8vIENoZWNr
IGZvciBlcnJvcgoJaWYoKCRSZXN1bHQgIT0gbnVsbCkgJiYgISRSZXN1bHQuZW5zdXJlTm9FcnJv
cigkVFBhY2thZ2UsICRDQ29udGV4dCkpIHJldHVybiBudWxsOwoJCgljaGFyIEYgPSAkVGV4dC50
b0xvd2VyQ2FzZSgpLmNoYXJBdCgxKTsKCXN3aXRjaChGKSB7CgkJY2FzZSAgJzAnOiByZXR1cm4g
KGNoYXIpSW50ZWdlci5wYXJzZUludCgkVGV4dC5zdWJzdHJpbmcoMiksICA4KTsKCQljYXNlICAn
eCc6IHJldHVybiAoY2hhcilJbnRlZ2VyLnBhcnNlSW50KCRUZXh0LnN1YnN0cmluZygyKSwgMTYp
OwoJCWNhc2UgICd1JzogcmV0dXJuIChjaGFyKUludGVnZXIucGFyc3oAAAQAZUludCgkVGV4dC5z
dWJzdHJpbmcoMiksIDE2KTsKCQljYXNlICdcXCc6IHJldHVybiAnXFwnOwoJCWNhc2UgJ1wiJzog
cmV0dXJuICdcIic7CgkJY2FzZSAnXCcnOiByZXR1cm4gJ1wnJzsKCQljYXNlICAndCc6IHJldHVy
biAnXHQnOwoJCWNhc2UgICduJzogcmV0dXJuICdcbic7CgkJY2FzZSAgJ3InOiByZXR1cm4gJ1xy
JzsKCQljYXNlICAnYic6IHJldHVybiAnXGInOwoJCWNhc2UgICdmJzogcmV0dXJuICdcZic7CgkJ
ZGVmYXVsdDogewoJCQlTdHJpbmcgTG9jYXRpb24gPSAoJFJlc3VsdCA9PSBudWxsKT8iIjoibmVh
ciAiICsgJFJlc3VsdC5sb2NhdGlvbk9mKDApOwoJCQkkQ0NvbnRleHQucmVwb3J0RXJyb3IoIklu
dmFsaWQgRXNjYXBlIENoYXJhY3RlciAoIiArICRUZXh0ICsgIikgPFV0aWxfTGl0ZXJhbDoyOD4g
IitMb2NhdGlvbiwgbnVsbCk7CgkJCXJldHVybiBudWxsOwoJCX0KCX1xAH4AF3QA0Fs6XDpdKAoJ
CTAoCgkJCVswLTNdWzAtN11bMC03XQoJCQl8fCAoCgkJCQlbMC03XVswLTddCgkJCQl8fAoJCQkJ
WzAtN10KCQkJKQoJCSkKCQl8CgkJW3hYXVswLTlhLWZBLUZdezIJCX0KCQl8CgkJW3VVXVswLTlh
LWZBLUZdezR9CgkJfAoJCVtbOlw6XVs6IjpdWzonOl10bnJiZl0KCQl8fAoJCSgkRVJST1JfSW52
YWxpZF9Fc2NhcGVfQ2hhcmFjdGVyOn4ufikKCSlxAH4AJnEAfgAUcQB+ABhwcQB+ACdxAH4AOHh0
AA5MaXRlcmFsX1N0cmluZ3NxAH4AInNxAH4AGz9AAAAAAAAMdwgAAAAQAAAABXEAfgAZdAHtLy8g
QFJlZ1BhcnNlcihKYXZhKToKCQoJLy8gRW1wdHkgU3RyaW5nCglpZigkUmVzdWx0ID09IG51bGwp
IHJldHVybiAiIjsKCQoJLy8gQ2hlY2sgZm9yIGVycm9yCglpZigoJFJlc3VsdCAhPSBudWxsKSAm
JiAhJFJlc3VsdC5lbnN1cmVOb0Vycm9yKCRUUGFja2FnZSwgJENDb250ZXh0KSkgcmV0dXJuIG51
bGw7CgkKCS8vIFNob3J0IHN0cmluZwoJU3RyaW5nQnVmZmVyIFNCID0gbmV3IFN0cmluZ0J1ZmZl
cigpOwoJaW50IENvdW50ID0gJFJlc3VsdC5lbnRyeUNvdW50KCk7Cglmb3oAAAQAcihpbnQgaSA9
IDA7IGkgPCBDb3VudDsgaSsrKSB7CgkJU3RyaW5nIE5hbWUgPSAkUmVzdWx0Lm5hbWVPZihpKTsK
CQlpZigiJENoYXJzW10iLmVxdWFscyhOYW1lKSkgewoJCQlTQi5hcHBlbmQoJCRbaV0kJAkJCSk7
CgoJCX0gZWxzZSBpZigiI0VzY2FwZUNociIuZXF1YWxzKE5hbWUpKSB7CgkJCVNCLmFwcGVuZChA
QFtpXUBAKTsKCQl9Cgl9CgoJcmV0dXJuIFNCLnRvU3RyaW5nKCk7cQB+ABd0ASooCgkJWzoiOl0o
KCRDaGFyc1tdOn5bXls6IjpdWzpOZXdMaW5lOl1dfil8KCNFc2NhcGVDaHI6IUxpdGVyYWxfQ2hh
cl9Fc2NhcGUhKSkqCgkJKFs6IjpdIHx8ICgkRVJST1JfTWlzc2luZ190aGVfY2xvc2luZ19xdWF0
YXRpb25fbWFyazp+W14uXXswfX4pKQoJCXwKCQlbOmA6XSgoJENoYXJzW106flteWzpgOl1bOk5l
d0xpbmU6XV1+KXwoI0VzY2FwZUNocjohTGl0ZXJhbF9DaGFyX0VzY2FwZSEpKSoKCQkoWzpgOl0g
fHwgKCRFUlJPUl9NaXNzaW5nX3RoZV9jbG9zaW5nX3F1YXRhdGlvbl9tYXJrOn5bXi5dezB9fikp
CgkpcQB+ACZxAH4AFHEAfgAYcHEAfgAncQB+AD14dAAJU3BhY2VzX09wc3EAfgAic3EAfgAbP0AA
AAAAAAx3CAAAABAAAAAFcQB+ABlwcQB+ABd0ADIvLyBUaGlzIGlzIG5vbi1uZXdsaW5lIHdoaXRl
c3BhY2UKCVtbOiA6XVs6VGFiOl1dKnEAfgAmcQB+ABRxAH4AGHBxAH4AJ3EAfgBCeHQACVNwYWNl
c19ScXNxAH4AInNxAH4AGz9AAAAAAAAMdwgAAAAQAAAABXEAfgAZcHEAfgAXdAAyLy8gVGhpcyBp
cyBub24tbmV3bGluZSB3aGl0ZXNwYWNlCglbWzogOl1bOlRhYjpdXStxAH4AJnEAfgAUcQB+ABhw
cQB+ACdxAH4ARnh0AAxVbml0RGVzY0ZpbGVzcQB+ACJzcQB+ABs/QAAAAAAADHcIAAAAEAAAAAVx
AH4AGXQJBy8vIEBSZWdQYXJzZXIoSmF2YSk6CglpbXBvcnQgamF2YS51dGlsLlZlY3RvcjsKCWlt
cG9ydCBuZXQubmF3YW1hbi5zY3JpcHQuVG9vbHM7CQoJCgkvLyBDaGVja3MgaWYgdGhlIFVuaXRE
ZXNjcmlwdGlvbiBmaWxlIGlzIHVwLXRvLWRhdGUgLS0tLS0tLS0tLS0tLS0tLXoAAAQALS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCglib29sZWFuIElzVXBU
b0RhdGUgPSBmYWxzZTsKCQoJaWYoJCQkQ29tcGlsZURhdGEkJCAhPSBudWxsKSB7CgkJaW50IFRl
eHRMZW5ndGhfMCA9IDo6JEVuZFRleHQ6OjsKCQlpbnQgVGV4dExlbmd0aF8xID0gSW50ZWdlci5w
YXJzZUludCgkJCRDT1VOVDEkJCwgMTYpOwoJCQoJCWlmKChUZXh0TGVuZ3RoXzAgPT0gVGV4dExl
bmd0aF8xKSkgewoJCQlpbnQgQ1N0ckxlbmd0aF8wID0gOjokRW5kQ1N0cjo6IC0gOjokU3RhcnRD
U3RyOjogKyAxOwkvLyArMSBpcyBmb3IgJ1xuJyBTZWUgbmV0L25hd2FtYW4vc2NyaXB0L1Rvb2xz
LmphdmEgZm9yIDxUb29sczo0MTU+CgkJCWludCBDU3RyTGVuZ3RoXzEgPSBJbnRlZ2VyLnBhcnNl
SW50KCQkJENPVU5UMiQkLCAxNik7CgkJCQoJCQlpZihDU3RyTGVuZ3RoXzAgPT0gQ1N0ckxlbmd0
aF8xKSB7CgkJCQlpbnQgVGV4dEhhc2hfMCA9IEludGVnZXIucGFyc2VJbnQoVG9vbHMuR2V0SGFz
aFRleHQoJFRleHQuc3Vic3RyaW5nKDAsIFRleHRMZW5ndGhfMCkpLnRyaW0oKSwgMTYpOwoJCQkJ
aW50IFRleHRIYXNoXzEgPSBJbnRlZ2VyLnBhcnNlSW50KCQkJEhBU0gxJCQsIDE2KTsKCQkJCQoJ
CQkJaWYoVGV4dEhhc2hfMCA9PSBUZXh0SGFzaF8xKSB7CgkJCQkJaW50IENTdHJIYXNoXzAgPSBJ
bnRlZ2VyLnBhcnNlSW50KFRvb2xzLkdldEhhc2hUZXh0KCRUZXh0LnN1YnN0cmluZyg6OiRTdGFy
dENTdHI6OiwgOjokRW5kQ1N0cjo6KSkudHJpbSgpLCAxNik7CgkJCQkJaW50IENTdHJIYXNoXzEg
PSBJbnRlZ2VyLnBhcnNlSW50KCQkJEhBU0gyJCQsIDE2KTsKCQkJCQkKCQkJCQlpZihDU3RySGFz
aF8wID09IENTdHJIYXNoXzEpIElzVXBUb0RhdGUgPSB0cnVlOwoJCQkJfQoJCQl9CgkJfQoJfQoJ
CgkvLyBUaGUgY29kZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXoAAAQALS0t
LS0tLS0tLS0tCgkKCVN0cmluZyBDb2RlID0gJFRleHQ7CQkJCglpZigkJCRFbmRUZXh0JCQgIT0g
bnVsbCkgQ29kZSA9ICRUZXh0LnN1YnN0cmluZygwLCA6OiRFbmRUZXh0OjopOwoJCgkvLyBQcm9j
ZXNzIHRoZSBjb2RlIGl0c2VsZiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoJU3Ry
aW5nW10gRGVmTmFtZXMgICAgID0gJCQkTnVtYmVyKiQkOwoJT2JqZWN0W10gRGVmVGV4dHMgICAg
ID0gQEAjVGV4dCpAQDsKCU9iamVjdFtdIFBhdGhQYXR0ZXJucyA9IEBAI0luY2x1ZGVkUGF0aCpA
QDsKCQoJLy8gRW5zdXJlIHRoZSBkZWZpbmUgbnVtYmVyIGlzIHdlbC1mb3JtZWQKCWZvcihpbnQg
aSA9IDE7IGkgPD0gKChEZWZOYW1lcyA9PSBudWxsKSA/IDAgOiBEZWZOYW1lcy5sZW5ndGgpOyBp
KyspIHsKCQlpbnQgTnVtID0gSW50ZWdlci5wYXJzZUludChEZWZOYW1lc1tpIC0gMV0pOwoJCWlm
KE51bSA9PSBpKSBjb250aW51ZTsKCQkKCQlTeXN0ZW0uZXJyLnByaW50bG4oIkludmFsaWQgZGVm
aW5lIG51bWJlcmluZy4gSXQgbXVzdCBzdGFydHMgZnJvbSBvbmUgYW5kIGluY3JlYXNlIGJ5IG9u
ZS4iKTsKCQlyZXR1cm4gbnVsbDsKCX0KCQoJVmVjdG9yPFN0cmluZz4gUGF0dGVybnMgPSBuZXcg
VmVjdG9yPFN0cmluZz4oKTsKCS8vIEZvcm1hdCB0aGUgcGF0dGVybgoJaWYoUGF0aFBhdHRlcm5z
ICE9IG51bGwpIHsKCQlmb3IoaW50IHAgPSAwOyBwIDwgUGF0aFBhdHRlcm5zLmxlbmd0aDsgcCsr
KSB7CgkJCU9iamVjdCBQT2JqID0gUGF0aFBhdHRlcm5zW3BdOwoJCQlpZihQT2JqID09IG51bGwp
IGNvbnRpbnVlOwoJCQoJCQlTdHJpbmcgUGF0dGVybiA9IFBPYmoudG9TdHJpbmcoKTsKCQkJaWYo
UGF0dGVybi5sZW5ndGgoKSA9PSAwKSBjb250aW51ZTsKCQkKCQkJUGF0dGVybnMuYWRkKFN0cmlu
Zy5mb3JtYXQoUGF0dGVybiwgKE9iamVjdFtdKURlZlRleHRzKSk7CgkJfQoJfQoJCglyZXoAAAQA
dHVybiBuZXcgT2JqZWN0W10geyBDb2RlLCBQYXR0ZXJucy50b0FycmF5KG5ldyBTdHJpbmdbUGF0
dGVybnMuc2l6ZSgpXSksIElzVXBUb0RhdGUsICQkJEJBU0U2NCQkLCAkJCRIQVNIMSQkfTtxAH4A
F3QDGigkQ29kZTp+CgkJKF4hQ29tcGlsZURhdGEhKSoKCQl+On4KCQkvLyBUaGlzIHBhcnQgaXMg
dG8gYmUgc3VyZSB0aGF0IHRoaXMgaXMgYSByaWdodCBraW5kIG9mIGZpbGUKCQkoXiMjfFs6TmV3
TGluZTpdKSogIyM6W3VVXVtuTl1baUldW3RUXSAhU3BhY2VzX09wISBbOjs6XSAoXiMjfFs6TmV3
TGluZTpdKSogIyNbOk5ld0xpbmU6XQoJCgkJIUlnbm9yZWQhKgoJCgkJKCNEZWZpbmUqOn4KCQkJ
KAoJCQkJIyM6RGVmaW5lICFTcGFjZXNfUnEhICMgIVNwYWNlc19PcCEgKCROdW1iZXI6flswLTld
K34pICFTcGFjZXNfT3AhIDogIVNwYWNlc19PcCEgKCNUZXh0OiFMaXRlcmFsX1N0cmluZyEpCgkJ
CQkhRW5kX1NlbWljb2xvbiEgWzpXaGl0ZVNwYWNlOl0qCgkJCQl8fAoJCQkJKCRFUlJPUl9JbnZh
bGlkX2RlZmluZV90ZXh0On4oWzojOl0jOkluY2x1ZGVkcyl7MH1bXjtdK34pCgkJCSkKCQkJIUln
bm9yZWQhKgoJCX4pKgoJCgkJIyM6SW5jbHVkZWRzICFTcGFjZXNfT3AhIFs6ezpdICFFT0whCgkJ
KAoJCQkhSWdub3JlZCEqCgkJCSgkSW5jbHVkZWRQYXRoOn4KCQkJCVteO1s6fTpdXSshRW5kX1Nl
bWljb2xvbiEgIUlnbm9yZWQhKgoJCQkJfjp+CgkJCQkoCgkJCQkJKCNJbmNsdWRlZFBhdGg6IVdp
bGRDYXJkUGF0aCEpIUVuZF9TZW1pY29sb24hCgkJCQkJfHwKCQkJCQkoJEVSUk9SX0ludmFsaWRf
aW5jbHVkZV9wYXRoOn4uKn4pCgkJCQkpCQkKCQkJfikKCQkpKgoJCVs6fTpdCgoJfikKCQoJKAoJ
CSgkRW5kVGV4dDp+W14uXXswfX4pCgkJKCNDb21waWxlRGF0YSo6IUNvbXBpbGVEYXRhISkKCSk/
cQB+ACZxAH4AFHEAfgAYcHEAfgAncQB+AEp4dAAMV2lsZENhcmRQYXRoc3EAfgAic3EAfgAbP0AA
AAAAAAx3CAAAABAAAAAFcQB+ABl0A7EvLyBAUmVnUGFyc2VyKEphdmEpOgoJaW1wb3J0IG5ldHoA
AAQALm5hd2FtYW4ucmVncGFyc2VyLio7CglTdHJpbmdCdWlsZGVyIFNCID0gbmV3IFN0cmluZ0J1
aWxkZXIoKTsKCQoJaWYoJFJlc3VsdCA9PSBudWxsKSByZXR1cm4gJFRleHQ7CgkKCWludCBDb3Vu
dCA9ICRSZXN1bHQuZW50cnlDb3VudCgpOwoJZm9yKGludCBpID0gMDsgaSA8IENvdW50OyBpKysp
IHsKCQljaGFyIEtpbmQgPSB+fltpXX5+LmNoYXJBdCgxKTsJLy8gVGhlIDB0aCBpcyAnJCcKCQlz
d2l0Y2goS2luZCkgewoJCQljYXNlICdRJzogU0IuYXBwZW5kKCIuIik7ICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgkJCWNhc2Ug
J08nOiBTQi5hcHBlbmQoJCRbaV0kJCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICBicmVhazsKCQkJY2FzZSAnUCc6IFNCLmFwcGVuZCgiWzoiKS5h
cHBlbmQoJCRbaV0kJCkuYXBwZW5kKCI6XSIpOyAgICAgICAgICAgICAgICAgICAgICAgICAgIGJy
ZWFrOwoJCQljYXNlICdEJzogU0IuYXBwZW5kKCIuKiIpOyAgICAgICAgICAgICAgICAgICBpZihp
ICE9IChDb3VudCAtIDEpKSBTQi5hcHBlbmQoIioiKTsgYnJlYWs7CgkJCWNhc2UgJ1QnOiBTQi5h
cHBlbmQoIlteWzovOl1bOlxcOl0gICAgIF0qIik7IGlmKGkgIT0gKENvdW50IC0gMSkpIFNCLmFw
cGVuZCgiKiIpOyBicmVhazsKCQkJY2FzZSAnQSc6IFNCLmFwcGVuZCgiW15bOi86XVs6XFw6XVs6
LjpdXSoiKTsgaWYoaSAhPSAoQ291bnQgLSAxKSkgU0IuYXBwZW5kKCIqIik7IGJyZWFrOwoJCQlj
YXNlICdSJzogU0IuYXBwZW5kKCIlIikuYXBwZW5kKCMjW2ldIyMtPiQkJE51bWJlciQkKS5hcHBl
bmQoIiRzIik7CgkJfQoJfQoJU0IuYXBwZW5kKCIuezB9Iik7CgkKCXJldHVybiBTQi50b1N0cmlu
ZygpO3EAfgAXdAJ0KAoJCSAgICgkUXVlc3Rpb25NYXJrOn4gIFs6PzpdICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH4pCgkJfHwgKCRUaWxk
ZXoAAAQAOn4gICAgICAgICBbOn46XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICB+KQoJCXx8ICgkRG91YmxlQXN0ZXJpc2s6fls6KjpdWzoq
Ol0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH4p
CgkJfHwgKCRBc3Rlcmlzazp+ICAgICAgWzoqOl1bOio6XXswfSAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfikKCQl8fCAoI1JlcGxhY2U6fiAgICAgICBb
Ols6XVs6Qmxhbms6XSpbOiM6XVs6Qmxhbms6XSooJE51bWJlcjp+WzAtOV0rfilbOkJsYW5rOl0q
WzpdOl1+KQoJCXx8ICgkT3RoZXJzW106fiAgICAgIFs6V29yZDpdICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH4pCgkJfHwgKCRQdW50dWF0aW9u
On4gICAgW15bOjs6XV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgfikKCSkrcQB+ACZxAH4AFHEAfgAYcHEAfgAncQB+AE94eHBzcQB+AAZwdwQA
AAALcQB+ACFzcgAkbmV0Lm5hd2FtYW4ucmVncGFyc2VyLnR5cGVzLlBUU2ltcGxlUa/lOVvBrcEC
AAJMAApUaGVDaGVja2VydAASTGphdmEvbGFuZy9PYmplY3Q7TAAHVGhlTmFtZXEAfgAMeHIAG25l
dC5uYXdhbWFuLnJlZ3BhcnNlci5QVHlwZWM1cNypvF3zAgAESQAFRmxhZ3NMAApEZWZhdWx0UmVm
dAAgTG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9QVHlwZVJlZjtMAAlUUHJvdmlkZXJ0ACVMbmV0L25h
d2FtYW4vcmVncGFyc2VyL1BUeXBlUHJvdmlkZXI7TAAGVGhpc1JQdAAhTG5ldC9uYXdhbWFuL3Jl
Z3BhcnNlci9SZWdQYXJzZXI7eHAAAAAAcHEAfgAFcHNyADduZXQubmF3YW1hbi5yZWdwYXJzZXIu
UmVnUGFyc2VyJFdpdGhEZWZhdWx0VHlwZVByb3ZpZGVykkwgTseUp/cCAAFMAAlUUHJvdmlkZXJx
AH4AWXhyAB9uZXQubmF3YW1hbi5yZWdwYXJzZXIuUmVnUGFyc2VyUFhFarj3kH8CAAFbAAdFbnRy
aWVzdHoAAAQAACBbTG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9SUEVudHJ5O3hwdXIAIFtMbmV0Lm5h
d2FtYW4ucmVncGFyc2VyLlJQRW50cnk7nuvTXhrjaoQCAAB4cAAAACJzcgApbmV0Lm5hd2FtYW4u
cmVncGFyc2VyLlJQRW50cnkkTmFtZWREaXJlY3QfKLNMv4ZB+AIAAUwABE5hbWVxAH4ADHhyACRu
ZXQubmF3YW1hbi5yZWdwYXJzZXIuUlBFbnRyeSREaXJlY3Ra2VSXnyJrtAIAAUwAClRoZUNoZWNr
ZXJ0AB9MbmV0L25hd2FtYW4vcmVncGFyc2VyL0NoZWNrZXI7eHIAHW5ldC5uYXdhbWFuLnJlZ3Bh
cnNlci5SUEVudHJ5IhwFgFmYJPoCAAB4cHNxAH4AXXVxAH4AYAAAAAFzcgAqbmV0Lm5hd2FtYW4u
cmVncGFyc2VyLlJQRW50cnkkRGlyZWN0X1dpdGhRc+X2gABlhDECAAFMAA1UaGVRdWFudGlmaWVy
dAAiTG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9RdWFudGlmaWVyO3hxAH4AY3NyACZuZXQubmF3YW1h
bi5yZWdwYXJzZXIuY2hlY2tlcnMuQ2hhck5vdEm9f1IkAVDBAgABTAALY2hhckNoZWNrZXJ0ACxM
bmV0L25hd2FtYW4vcmVncGFyc2VyL2NoZWNrZXJzL0NoYXJDaGVja2VyO3hyACpuZXQubmF3YW1h
bi5yZWdwYXJzZXIuY2hlY2tlcnMuQ2hhckNoZWNrZXLpqm/Ngdo38gIAAHhwc3IAKG5ldC5uYXdh
bWFuLnJlZ3BhcnNlci5jaGVja2Vycy5DaGFyUmFuZ2Ugs+ocN4amBAIAAkMAB2VuZENoYXJDAAlz
dGFydENoYXJ4cQB+AG7//wAAc3IAIG5ldC5uYXdhbWFuLnJlZ3BhcnNlci5RdWFudGlmaWVyGsnS
gZGhcGICAANJAApsb3dlckJvdW5kSQAKdXBwZXJCb3VuZEwACmdyZWVkaW5lc3N0ACJMbmV0L25h
d2FtYW4vcmVncGFyc2VyL0dyZWVkaW5lc3M7eHAAAAAAAAAAAH5yACBuZXQubmF3YW1hbi5yZWdw
YXJzZXIuR3JlZWRpbmVzcwAAAAAAAAAAEgAAeHIADmphdmEubGFuZy5FbnVtAAAAAAAAAAASAAB4
cHQAClBvc3Nlc3NpdmV0AAwkQ29tcGlsZURhdGFzcQB+AGNzcgApbmV0Lm5hd2FtYW4ucmVncGFy
c2VyLmNoZWNrZXJzLkNoYXJTaW5nbGUW64jT67CydQIAAUMAAmNoeHEAfgBuAApzcQB+AGNzcQB+
AHsAL3NxAHoAAAQAfgBpc3EAfgB7ACpzcQB+AHIAAAAA/////3EAfgB3c3EAfgBjcQB+AHxzcQB+
AGJzcQB+AF11cQB+AGAAAAABc3EAfgBpc3EAfgBscQB+AHFxAH4AdHQACiRTdGFydENTdHJzcQB+
AGNzcgAqbmV0Lm5hd2FtYW4ucmVncGFyc2VyLmNoZWNrZXJzLldvcmRDaGVja2VyoNoqiW20h6UC
AAFMAAR3b3JkcQB+AAx4cHQAEyMjOkNPTVBJTEVEOjpCQVNFNjRzcQB+AGNzcQB+AHsAIHNxAH4A
Y3NxAH4AewB7c3EAfgBjcQB+AHxzcQB+AGJzcQB+AF11cQB+AGAAAAABc3EAfgBpc3EAfgBddXEA
fgBgAAAAAnNxAH4AaXNyAChuZXQubmF3YW1hbi5yZWdwYXJzZXIuY2hlY2tlcnMuQ2hhclVuaW9u
H2mdk/SL6A4CAAFbAAxjaGFyQ2hlY2tlcnN0AC1bTG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9jaGVj
a2Vycy9DaGFyQ2hlY2tlcjt4cQB+AG51cgAtW0xuZXQubmF3YW1hbi5yZWdwYXJzZXIuY2hlY2tl
cnMuQ2hhckNoZWNrZXI7fxf7L33raMkCAAB4cAAAAAZzcQB+AHAAegBhc3EAfgBwAFoAQXNxAH4A
cAA5ADBzcQB+AHsAK3EAfgB+c3EAfgB7AD1xAH4AgXNxAH4AY3EAfgB8cQB+AIF0AAckQkFTRTY0
c3EAfgBjc3EAfgB7AH1zcQB+AGJzcQB+AF11cQB+AGAAAAABc3EAfgBpc3EAfgBscQB+AHFxAH4A
dHQACCRFbmRDU3Ryc3EAfgBjcQB+AHxzcQB+AGNzcQB+AIp0AAwjIzpIQVNIRVM6MHhzcQB+AGlz
cgAmbmV0Lm5hd2FtYW4ucmVncGFyc2VyLmNoZWNrZXJzLkNoYXJTZXQeDUYoeEO3QwIAAUwAA3Nl
dHEAfgAMeHEAfgBudAACIAlxAH4AgXNxAH4AYnNxAH4AXXVxAH4AYAAAAAFzcQB+AGlzcQB+AJl1
cQB+AJwAAAACc3EAfgBwAEYAQXNxAH4AcAA5ADBxAH4AgXQABiRIQVNIMXNxAH4AY3NxAH4AewAt
c3EAfgBjc3EAfgCKdAACMHhzcQB+AGlxAH4As3EAfgCBc3EAfgBic3EAfgBddXEAfgBgAAAAAXNx
AH4AaXNxAH4AmXVxAH4AnAAAAAJzcQB+AHAARgBBc3EAfgBwADkAMHEAfgCBdAAGJEhBU0gyc3EA
fgBjc3EAfgB7ADtzcQB+AGNxAH4AfHNxAH4AY3NxAH4AinQADCMjOkNPVU5UUzoweHNxAH4AaXEA
fgCzcQB+AIFzcXoAAAQAAH4AYnNxAH4AXXVxAH4AYAAAAAFzcQB+AGlzcQB+AJl1cQB+AJwAAAAC
c3EAfgBwAEYAQXNxAH4AcAA5ADBxAH4AgXQAByRDT1VOVDFzcQB+AGNxAH4Av3NxAH4AY3NxAH4A
inQAAjB4c3EAfgBpcQB+ALNxAH4AgXNxAH4AYnNxAH4AXXVxAH4AYAAAAAFzcQB+AGlzcQB+AJl1
cQB+AJwAAAACc3EAfgBwAEYAQXNxAH4AcAA5ADBxAH4AgXQAByRDT1VOVDJzcQB+AGNxAH4AznNx
AH4AY3EAfgB8c3EAfgBpcQB+AIBxAH4AgXNxAH4AY3EAfgB+cQB+AAVxAH4AIXEAfgAoc3EAfgBV
AAAAAHBxAH4ABXBzcQB+AFx1cQB+AGAAAAACc3IAK25ldC5uYXdhbWFuLnJlZ3BhcnNlci5SUEVu
dHJ5JFR5cGVSZWZfV2l0aFE5Odcv5llzywIAAUwADVRoZVF1YW50aWZpZXJxAH4AanhyACVuZXQu
bmF3YW1hbi5yZWdwYXJzZXIuUlBFbnRyeSRUeXBlUmVmMXu+MwY+tp4CAAFMAApUaGVUeXBlUmVm
cQB+AFh4cQB+AGVzcgAlbmV0Lm5hd2FtYW4ucmVncGFyc2VyLlBUeXBlUmVmJFNpbXBsZee5GjZu
IOviAgACTAAFUGFyYW1xAH4ADEwACFR5cGVOYW1lcQB+AAx4cgAebmV0Lm5hd2FtYW4ucmVncGFy
c2VyLlBUeXBlUmVm35Wve3ike9UCAAB4cHB0AAlTcGFjZXNfT3BxAH4AgXNxAH4AY3EAfgB8cQB+
AAVxAH4AKHEAfgAsc3EAfgBVAAAAAHBxAH4ABXBzcQB+AFx1cQB+AGAAAAABc3EAfgBjc3IAMW5l
dC5uYXdhbWFuLnJlZ3BhcnNlci5jaGVja2Vycy5DaGVja2VyQWx0ZXJuYXRpdmUdyfRl5NE0GwIA
AlsACGNoZWNrZXJzdAAgW0xuZXQvbmF3YW1hbi9yZWdwYXJzZXIvQ2hlY2tlcjtMAA5kZWZhdWx0
Q2hlY2tlcnEAfgBkeHB1cgAgW0xuZXQubmF3YW1hbi5yZWdwYXJzZXIuQ2hlY2tlcjsEPwl2lAGR
ngIAAHhwAAAAAXNxAH4AXXVxAH4AYAAAAAVzcQB+APJzcQB+APVwdAAJU3BhY2VzX09wcQB+AIFz
cQB+AGNxAH4AznNxAH4A8nNxAH4A9XB0AAlTcGFjZXNfT3BxAH4AgXNxAH4AY3EAfgB8c3EAfgDy
c3EAfgD1cHQACVNwYWNlc19PcHEAfgCBc3EAfgBddXEAfgBgAAAAAXNxAH4AYnNxAH4AXXVxAH4A
YAAAAAFzcQB+AGlzcXoAAAQAAH4AbHEAfgBxcQB+AHR0ABgkRVJST1JfTWlzc2luZ19zZW1pY29s
b25xAH4ABXEAfgAscQB+ADBzcQB+AFUAAAAAcHEAfgAFcHNxAH4AXHVxAH4AYAAAAAJzcQB+AGNz
cQB+AJl1cQB+AJwAAAACc3EAfgBwAHoAYXNxAH4AcABaAEFzcQB+AGlzcQB+AJl1cQB+AJwAAAAD
c3EAfgBwAHoAYXNxAH4AcABaAEFzcQB+AHAAOQAwcQB+AIFxAH4ABXEAfgAwcQB+ADRzcQB+AFUA
AAAAcHEAfgAFcHNxAH4AXHVxAH4AYAAAAAFzcQB+AGNzcQB+AP51cQB+AQEAAAABc3EAfgD+dXEA
fgEBAAAAAXNxAH4A/nVxAH4BAQAAAAFzcQB+ALJ0AAYgCQoNCwxxAH4AfHNxAH4AXXVxAH4AYAAA
AARzcQB+AGNxAH4AfnNxAH4AY3EAfgB+c3EAfgBpc3EAfgBscQB+AHxxAH4AgXNxAH4AY3EAfgB8
c3EAfgBddXEAfgBgAAAABXNxAH4AY3NxAH4AewAoc3EAfgBjcQB+AIBzcQB+AGlzcgApbmV0Lm5h
d2FtYW4ucmVncGFyc2VyLmNoZWNrZXJzLkNoZWNrZXJOb3Q+QUidyODHFwIAAUwAB2NoZWNrZXJx
AH4AZHhwc3EAfgBddXEAfgBgAAAAAXNxAH4AY3NxAH4AXXVxAH4AYAAAAAJzcQB+AGNxAH4AgHNx
AH4AY3NxAH4AewApcQB+AIFzcQB+AGNxAH4AgHNxAH4AY3EAfgFIcQB+AAVxAH4ANHEAfgA4c3IA
KG5ldC5uYXdhbWFuLnJlZ3BhcnNlci50eXBlcy5QVENvbXBvc2FibGV6eecZ5JoY9AIAAkwACENv
bXBpbGVydAAiTG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9SUENvbXBpbGVyO0wACFZlcmlmaWVydAAm
TG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9SZXN1bHRWZXJpZmllcjt4cQB+AFUAAAAAcHEAfgAFcHNx
AH4AXHVxAH4AYAAAAAJzcQB+AGNzcQB+AHsAXHNxAH4AY3NxAH4A/nVxAH4BAQAAAARzcQB+AF11
cQB+AGAAAAACc3EAfgBjc3EAfgCKdAABMHNxAH4AY3NxAH4A/nVxAH4BAQAAAAFzcQB+AF11cQB+
AGAAAAADc3EAfgBjc3EAfgBwADMAMHNxAH4AY3NxAH4AcAA3ADBzcQB+AGNzcQB+AHAANwAwc3EA
fgD+dXEAfgEBAAAAAXNxAH4AXXVxAH4AYAAAAAJzcQB+AGNzcQB+AHAANwAwc3EAfgBjc3EAfgBw
ADcAMHNxAH4AcAA3ADBzcXoAAAQAAH4AXXVxAH4AYAAAAAJzcQB+AGNzcQB+ALJ0AAJ4WHNxAH4A
aXNxAH4AmXVxAH4AnAAAAANzcQB+AHAAOQAwc3EAfgBwAGYAYXNxAH4AcABGAEFzcQB+AHIAAAAC
AAAAAnEAfgB3c3EAfgBddXEAfgBgAAAAAnNxAH4AY3NxAH4AsnQAAnVVc3EAfgBpc3EAfgCZdXEA
fgCcAAAAA3NxAH4AcAA5ADBzcQB+AHAAZgBhc3EAfgBwAEYAQXNxAH4AcgAAAAQAAAAEcQB+AHdz
cQB+AJl1cQB+AJwAAAADcQB+AVJzcQB+AHsAInNxAH4AsnQABid0bnJiZnNxAH4AXXVxAH4AYAAA
AAFzcQB+AGJxAH4AcXQAHyRFUlJPUl9JbnZhbGlkX0VzY2FwZV9DaGFyYWN0ZXJxAH4ABXEAfgA4
c3IALG5ldC5uYXdhbWFuLnJlZ3BhcnNlci50eXBlcGFja2FnZS5UUENvbXBpbGVyZ6pW2UjLsFwC
AAJMAA9Db21waWxlRnVuY3Rpb250AB1MbmV0L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9uO0wAC1R5
cGVQYWNrYWdldAAwTG5ldC9uYXdhbWFuL3JlZ3BhcnNlci90eXBlcGFja2FnZS9QVHlwZVBhY2th
Z2U7eHBzcgAkbmV0Lm5hd2FtYW4uc2NyaXB0LmphdmEuSmF2YUZ1bmN0aW9u+BLvMLX96zUDAAB4
cgAibmV0Lm5hd2FtYW4uc2NyaXB0LkZ1bmN0aW9uJFNpbXBsZQgMk3MDlN8+AgACTAAHRlZJbmZv
c3QAKExuZXQvbmF3YW1hbi9zY3JpcHQvRnJvemVuVmFyaWFibGVJbmZvcztbAApQYXJhbU5hbWVz
cQB+AAt4cHNyACZuZXQubmF3YW1hbi5zY3JpcHQuRnJvemVuVmFyaWFibGVJbmZvc0OOb7FLK9un
AgAAeHB1cQB+AA4AAAAGdAAJJFRQYWNrYWdldAALJFRoaXNSZXN1bHR0AAckRUluZGV4dAAGJFBh
cmFtdAAJJENDb250ZXh0dAAKJFRQcm92aWRlcncMAApKQ08tTkVFREVEdXIAAltCrPMX+AYIVOAC
AAB4cAAAE5Os7QAFdxkACkpDTy1ORUVERUQAA0pDTwAAAGQAAAABdXIAAltCrPMX+AYIVOACAAB4
cAAAD46s7QAFc3IAIm5ldC5uYXdhbWFuLmphdmFjb21waWxlci5DbGFzc0RhdGFRXh2jjFupAwIA
BlsABWJ5dGVzdAACW0JMAARjb2RldAASTGphdmEvbGFuZy9TdHJpbmc7WwAPZW5jbG9zZWRDbGFz
c2VzdAAlW0xuZXQvbmF3YW1hbnoAAAQAL2phdmFjb21waWxlci9DbGFzc0RhdGE7TAAOZW5jbG9z
aW5nQ2xhc3N0ACRMbmV0L25hd2FtYW4vamF2YWNvbXBpbGVyL0NsYXNzRGF0YTtMAARuYW1lcQB+
AAJMAARwYXRocQB+AAJ4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAA4fyv66vgAAADcAoAoAIgBBCQAh
AEIJACEAQwgARAkARQBGCgAhAEcKAEUASAoARQBJCgAhAEoKACEASwcATAcATQcATgcATwcAUAcA
UQoADABSCgANAFMKAAwAVAoADABVCgALAFYKAAwAVwoADgBYCgAOAFkKAA4AWgoADQBbCgBcAF0I
AF4KAAwAXxIAAABjEgABAGULAA8AZgcAZwcAaAcAaQcAawEABSRDb2RlAQASTGphdmEvbGFuZy9T
dHJpbmc7AQAKJFNpZ25hdHVyZQEAHkxuZXQvbmF3YW1hbi9zY3JpcHQvU2lnbmF0dXJlOwEABjxp
bml0PgEATShMbmV0L25hd2FtYW4vc2NyaXB0L1NpZ25hdHVyZTtMamF2YS9sYW5nL1N0cmluZztM
bmV0L25hd2FtYW4vc2NyaXB0L1Njb3BlOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADWdl
dEVuZ2luZU5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACWdldEVuZ2luZQEAIygpTG5ldC9u
YXdhbWFuL3NjcmlwdC9TY3JpcHRFbmdpbmU7AQAHZ2V0Q29kZQEADGdldFNpZ25hdHVyZQEAICgp
TG5ldC9uYXdhbWFuL3NjcmlwdC9TaWduYXR1cmU7AQAFJFNlbGYBACcoW0xqYXZhL2xhbmcvT2Jq
ZWN0OylMamF2YS9sYW5nL09iamVjdDsBAANydW4HAG0BAAZTaW1wbGUBAAxJbm5lckNsYXNzZXMB
AEsoTG5ldC9uYXdhbWFuL3NjcmlwdC9GdW5jdGlvbiRTaW1wbGU7W0xqYXZhL2xhbmcvT2JqZWN0
OylMamF2YS9sYW5nL09iamVjdDsBAEwoSUxuZXQvbmF3YW1hbi9zY3JpcHQvRnVuY3Rpb24kU2lt
cGxlO1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQANU3RhY2tNYXBUYWJs
ZQcAbgcAcAEAClNvdXJjZUZpbGUBACtMaXRlcmFsX0NoYXJfRXNjYXBlQ29tcGlsZXJfMTU2MzMz
MjU4MC5qYXZhDAApAHEMACcAKAwAJQAmAQAESmF2YQcAcgwAcwB0DAAtAC4MAHUAdgwAdwB4DAA2
ADoMADYAOwEALm5ldC9uYXdhbWFuL3oAAAQAcmVncGFyc2VyL3R5cGVwYWNrYWdlL1BUeXBlUGFj
a2FnZQEAKG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9yZXN1bHQvUGFyc2VSZXN1bHQBABFqYXZhL2xh
bmcvSW50ZWdlcgEAEGphdmEvbGFuZy9TdHJpbmcBAChuZXQvbmF3YW1hbi9yZWdwYXJzZXIvQ29t
cGlsYXRpb25Db250ZXh0AQAjbmV0L25hd2FtYW4vcmVncGFyc2VyL1BUeXBlUHJvdmlkZXIMAHkA
LgwAegB7DAB8AH0MAH4AfwwAgACBDACCAIMMAIQALgwAhQCGDACHAH0MAIgAiQcAigwAiwCMAQAA
DACNAH0BABBCb290c3RyYXBNZXRob2RzDwYAjggAjwwAkAB2CACRDACQAJIMAJMAlAEAJkxpdGVy
YWxfQ2hhcl9Fc2NhcGVDb21waWxlcl8xNTYzMzMyNTgwAQAQamF2YS9sYW5nL09iamVjdAEAJ25l
dC9uYXdhbWFuL3NjcmlwdC9GdW5jdGlvbiRTaW1wbGUkQm9keQEABEJvZHkBABRqYXZhL2lvL1Nl
cmlhbGl6YWJsZQcAlQEAIm5ldC9uYXdhbWFuL3NjcmlwdC9GdW5jdGlvbiRTaW1wbGUBABNbTGph
dmEvbGFuZy9PYmplY3Q7BwCWAQAfbmV0L25hd2FtYW4vc2NyaXB0L1Njb3BlJFNpbXBsZQEAAygp
VgEAIG5ldC9uYXdhbWFuL3NjcmlwdC9TY3JpcHRNYW5hZ2VyAQAISW5zdGFuY2UBACJMbmV0L25h
d2FtYW4vc2NyaXB0L1NjcmlwdE1hbmFnZXI7AQAYZ2V0RW5naW5lQ2xhc3NOYW1lQnlOYW1lAQAm
KExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABJnZXREZWZhdWx0RW5naW5l
T2YBADUoTGphdmEvbGFuZy9TdHJpbmc7KUxuZXQvbmF3YW1hbi9zY3JpcHQvU2NyaXB0RW5naW5l
OwEADm9yaWdpbmFsU3RyaW5nAQAIaW50VmFsdWUBAAMoKUkBAAZ0ZXh0T2YBABUoSSlMamF2YS9s
YW5nL1N0cmluZzsBAAVzdWJPZgEALShJKUxuZXQvbmF3YW1hbi9yZWdwYXJzZXIvcmVzdWx0L1Bh
cnNlUmVzdWx0OwEADGdldE1haW5TY29wZQEAIygpTG5ldC9uYXdhbWFuL3NjcmlwdC9TY29wZSRT
aW1wbGU7AQANZW5zdXJlTm9FcnJvcgEAUihMbmV0L25hd2FtYW4vcmVncGFyc2VyL1BUeXBlUHJv
dmlkZXI7TG5ldC9uYXdhbWFuL3JlZ3BhcnoAAAQAc2VyL0NvbXBpbGF0aW9uQ29udGV4dDspWgEA
C3RvTG93ZXJDYXNlAQAGY2hhckF0AQAEKEkpQwEACXN1YnN0cmluZwEACHBhcnNlSW50AQAWKExq
YXZhL2xhbmcvU3RyaW5nO0kpSQEAE2phdmEvbGFuZy9DaGFyYWN0ZXIBAAd2YWx1ZU9mAQAYKEMp
TGphdmEvbGFuZy9DaGFyYWN0ZXI7AQAKbG9jYXRpb25PZgoAlwCYAQAGbmVhciABAQAXbWFrZUNv
bmNhdFdpdGhDb25zdGFudHMBADBJbnZhbGlkIEVzY2FwZSBDaGFyYWN0ZXIgKAEpIDxVdGlsX0xp
dGVyYWw6Mjg+IAEBADgoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KUxqYXZh
L2xhbmcvU3RyaW5nOwEAC3JlcG9ydEVycm9yAQAqKExqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xh
bmcvVGhyb3dhYmxlOylWAQAbbmV0L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9uAQAYbmV0L25hd2Ft
YW4vc2NyaXB0L1Njb3BlBwCZDACQAJwBACRqYXZhL2xhbmcvaW52b2tlL1N0cmluZ0NvbmNhdEZh
Y3RvcnkHAJ4BAAZMb29rdXABAJgoTGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlcyRMb29r
dXA7TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9kVHlwZTtMamF2YS9s
YW5nL1N0cmluZztbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvaW52b2tlL0NhbGxTaXRl
OwcAnwEAJWphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlcyRMb29rdXABAB5qYXZhL2xhbmcv
aW52b2tlL01ldGhvZEhhbmRsZXMAIQAhACIAAgAjACQAAgAQACUAJgAAABAAJwAoAAAACAABACkA
KgABACsAAAAnAAIABAAAAA8qtwABKiu1AAIqLLUAA7EAAAABACwAAAAGAAEAAAABAAEALQAuAAEA
KwAAABsAAQABAAAAAxIEsAAAAAEALAAAAAYAAQAAAAEAAQAvADAAAQArAAAAJgACAAEAAAAOsgAF
KrYABrgAB7YACLAAAAABACwAAAAGAAEAAAABAAEAMQAuAAEAKwAAAB0AAQABAAAABSq0AAOwAAAA
AQAsAAAABgABAAAAAQABADIAMwABACsAAAAdAAEAAQAAAAUqtAACsAAAAAEALAAAAAYAAQAAAAEA
ggA0ADUAAQArAAAAHwADAAIAAAAHKgErtgAJsHoAAAQAAAAAAQAsAAAABgABAAAAAQCBADYAOgAB
ACsAAAAgAAQAAwAAAAgqAysstgAKsAAAAAEALAAAAAYAAQAAAAEAgQA2ADsAAQArAAACDgADABEA
AAFiLQMywAALOgQtBDLAAAw6BS0FMsAADToGLQYywAAOOgctBzLAAA86CC0IMsAAEDoJGQW2ABE6
CxkFGQa2ABK2ABM6DBkFGQa2ABK2ABQ6DRkEtgAVOg4ZDcYAERkNGQQZCLYAFpoABQGwGQy2ABcE
tgAYNg8VD6sAAAAAwgAAAAsAAAAiAAAAmAAAACcAAACeAAAAMAAAAGIAAABcAAAAkgAAAGIAAAC2
AAAAZgAAALwAAABuAAAAqgAAAHIAAACwAAAAdAAAAKQAAAB1AAAAggAAAHgAAAByGQwFtgAZEAi4
ABqSuAAbsBkMBbYAGRAQuAAakrgAG7AZDAW2ABkQELgAGpK4ABuwEFy4ABuwECK4ABuwECe4ABuw
EAm4ABuwEAq4ABuwEA24ABuwEAi4ABuwEAy4ABuwGQ3HAAgSHKcADhkNA7YAHboAHgAAOhAZCBkM
GRC6AB8AAAG5ACADAAGwAAAAAgAsAAAATgATAAAAAQAwAAIAVgAEAGkABgB0AAcA2AAIAOgACQD4
AAoBCAALAQ4ADAEUAA0BGgAOASAADwEmABABLAARATIAEgE4ABQBTwAVAWAAFgA8AAAARgAP/wBp
AA8HACEBBwA3BwA9BwALBwAMBwANBwAOBwAPBwAQAAcADgcADgcADAcAPgAA/ABuAQ8PDwUFBQUF
BQUFCUoHAA4AAwA/AAAAAgBAADkAAAAiAAQANwBsADgECQAjADcAagYJAD4AbwA4AAkAmgCdAJsA
GQBgAAAADgACAGEAAQBiAGEAAQBkcHVyACVbTG5ldC5uYXdhbWFuLmphdmFjb21waWxlci5DbGFz
c0RhdGE7Ta2XvtRHiC8CAAB4cAAAAABwdAAsTGl0ZXJhbF9DaGFyX0VzY2FwZUNvbXBpbGVyXzE1
NjMzMzI1ODAuY2xhc3N0AAB1cQB+AAAAAAPFrO0ABXVyABdbTGphdmEuaW8uU2VyaWFsaXphYmxl
O67QCaxT1+1JAgAAeHAAAAABc3IAJkxpdGVyYWxfQ2hhcl9Fc2NhcGVDb21waWxlcl8xNTYzMzMy
NTgw/GSoqXnENFICAAJMAAUkQ29kZXQAEkxqYXZhL2xhbmcvU3RyaW5nO0wACiRTaWduYXR1cmV0
AB5MbmV0L25hd2FtYW4vc2NyaXB0L1NpZ25hdHVyZTt4cHBzcgAjbmV0Lm5hd2FtYW4uc2NyaXB0
LlNpZ25hdHVyZSRTaW1wbGUmayAPNFKCFQIABFoACXoAAAQASXNWYXJBcmdzTAAETmFtZXEAfgAD
WwAKUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO0wAClJldHVyblR5cGV0ABFMamF2YS9s
YW5nL0NsYXNzO3hwAHQAG0xpdGVyYWxfQ2hhcl9Fc2NhcGVDb21waWxlcnVyABJbTGphdmEubGFu
Zy5DbGFzczurFteuy81amQIAAHhwAAAABnZyAC5uZXQubmF3YW1hbi5yZWdwYXJzZXIudHlwZXBh
Y2thZ2UuUFR5cGVQYWNrYWdlcXD2kL7+cB4DAAhaAAhJc0Zyb3plblsADEJ1ZmZlclRvU2F2ZXQA
AltCTAAKQ2xhc3NQYXRoc3QAEkxqYXZhL3V0aWwvVmVjdG9yO0wACUVycm9yTXNnc3QAE0xqYXZh
L3V0aWwvVHJlZU1hcDtMAAZLRGF0YXNxAH4AEEwACU1vcmVEYXRhc3QAE0xqYXZhL3V0aWwvSGFz
aE1hcDtMAAdQTlR5cGVzcQB+ABBMAAZUU3BlY3NxAH4AEHhwdnIAKG5ldC5uYXdhbWFuLnJlZ3Bh
cnNlci5yZXN1bHQuUGFyc2VSZXN1bHQ/DejKt/6hkgIAAUwAB2VudHJpZXN0ABBMamF2YS91dGls
L0xpc3Q7eHB2cgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEu
bGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhw
dnIAKG5ldC5uYXdhbWFuLnJlZ3BhcnNlci5Db21waWxhdGlvbkNvbnRleHQAAAAAAAAAAAAAAHhw
dnIAI25ldC5uYXdhbWFuLnJlZ3BhcnNlci5QVHlwZVByb3ZpZGVyCACJkgQd6g4CAAB4cHZyABBq
YXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHhxAH4ABXBxAH4APXNxAH4BSwAAAABwcQB+AAVw
c3EAfgBcdXEAfgBgAAAAAXNxAH4AY3NxAH4A/nVxAH4BAQAAAAJzcQB+AF11cQB+AGAAAAADc3EA
fgBjcQB+AYlzcQB+AGlzcQB+AP51cQB+AQEAAAACc3EAfgBddXEAfgBgAAAAAXNxAH4AYnNxAH4A
bHNxAH4AmXVxAH4AnAAAAAJxAH4BiXEAfgB8dAAIJENoYXJzW11zcQB+AF11cQB+AGAAAAABc3IA
Km5ldC5uYXdhbWFuLnJlZ3BhcnNlci5SUEVudHJ5JE5hbWVkVHlwZVJlZi/3pLmpqLdLAgABTAAE
TmFtZXEAfgAMeHEAfgDzc3EAfgD1cHQAE0xpdGVyYWxfQ3oAAAQAaGFyX0VzY2FwZXQACiNFc2Nh
cGVDaHJwcQB+AIFzcQB+AGNzcQB+AP51cQB+AQEAAAABcQB+AYlzcQB+AF11cQB+AGAAAAABc3EA
fgBic3EAfgBddXEAfgBgAAAAAXNxAH4AaXNxAH4AbHEAfgBxcQB+AHR0ACkkRVJST1JfTWlzc2lu
Z190aGVfY2xvc2luZ19xdWF0YXRpb25fbWFya3NxAH4AXXVxAH4AYAAAAANzcQB+AGNzcQB+AHsA
YHNxAH4AaXNxAH4A/nVxAH4BAQAAAAJzcQB+AF11cQB+AGAAAAABc3EAfgBic3EAfgBsc3EAfgCZ
dXEAfgCcAAAAAnEAfgHLcQB+AHx0AAgkQ2hhcnNbXXNxAH4AXXVxAH4AYAAAAAFzcQB+AbhzcQB+
APVwdAATTGl0ZXJhbF9DaGFyX0VzY2FwZXQACiNFc2NhcGVDaHJwcQB+AIFzcQB+AGNzcQB+AP51
cQB+AQEAAAABcQB+ActzcQB+AF11cQB+AGAAAAABc3EAfgBic3EAfgBddXEAfgBgAAAAAXNxAH4A
aXNxAH4AbHEAfgBxcQB+AHR0ACkkRVJST1JfTWlzc2luZ190aGVfY2xvc2luZ19xdWF0YXRpb25f
bWFya3BxAH4ABXEAfgA9c3EAfgGQc3EAfgGUcQB+AZl1cQB+AA4AAAAGcQB+AZtxAH4BnHEAfgGd
cQB+AZ5xAH4Bn3EAfgGgdwwACkpDTy1ORUVERUR1cQB+AaEAABFarO0ABXcZAApKQ08tTkVFREVE
AANKQ08AAABkAAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAA1frO0ABXNyACJuZXQubmF3YW1hbi5q
YXZhY29tcGlsZXIuQ2xhc3NEYXRhUV4do4xbqQMCAAZbAAVieXRlc3QAAltCTAAEY29kZXQAEkxq
YXZhL2xhbmcvU3RyaW5nO1sAD2VuY2xvc2VkQ2xhc3Nlc3QAJVtMbmV0L25hd2FtYW4vamF2YWNv
bXBpbGVyL0NsYXNzRGF0YTtMAA5lbmNsb3NpbmdDbGFzc3QAJExuZXQvbmF3YW1hbi9qYXZhY29t
cGlsZXIvQ2xhc3NEYXRhO0wABG5hbWVxAH4AAkwABHBhdGhxAH4AAnhwdXIAAltCrPMX+AYIVOAC
AAB4cAAAC/XK/rq+AAAANwCOCgAkAEMJACMARAkAIwBFCABGCQBHAEgKACMASQoARwBKCgBHAEsK
ACMATAoAIwBNBwBOBwBPBwBQBwBRBwBSBwBTCgAMAFQKAA0AVQoADABWCgAMAFcKAAsAWAgAWQoA
DABaBwBbCgAYAEMKAAwAXAoADABdCABeCgAOAF8KABgAYAgAYXoAAAQACgAMAGIKABgAYwoAGABk
BwBlBwBmBwBnBwBpAQAFJENvZGUBABJMamF2YS9sYW5nL1N0cmluZzsBAAokU2lnbmF0dXJlAQAe
TG5ldC9uYXdhbWFuL3NjcmlwdC9TaWduYXR1cmU7AQAGPGluaXQ+AQBNKExuZXQvbmF3YW1hbi9z
Y3JpcHQvU2lnbmF0dXJlO0xqYXZhL2xhbmcvU3RyaW5nO0xuZXQvbmF3YW1hbi9zY3JpcHQvU2Nv
cGU7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQANZ2V0RW5naW5lTmFtZQEAFCgpTGphdmEv
bGFuZy9TdHJpbmc7AQAJZ2V0RW5naW5lAQAjKClMbmV0L25hd2FtYW4vc2NyaXB0L1NjcmlwdEVu
Z2luZTsBAAdnZXRDb2RlAQAMZ2V0U2lnbmF0dXJlAQAgKClMbmV0L25hd2FtYW4vc2NyaXB0L1Np
Z25hdHVyZTsBAAUkU2VsZgEAJyhbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0
OwEAA3J1bgcAawEABlNpbXBsZQEADElubmVyQ2xhc3NlcwEASyhMbmV0L25hd2FtYW4vc2NyaXB0
L0Z1bmN0aW9uJFNpbXBsZTtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEA
TChJTG5ldC9uYXdhbWFuL3NjcmlwdC9GdW5jdGlvbiRTaW1wbGU7W0xqYXZhL2xhbmcvT2JqZWN0
OylMamF2YS9sYW5nL09iamVjdDsBAA1TdGFja01hcFRhYmxlBwBsBwBuAQAKU291cmNlRmlsZQEA
JkxpdGVyYWxfU3RyaW5nQ29tcGlsZXJfMTU2MzMzMjU3OS5qYXZhDAArAG8MACkAKgwAJwAoAQAE
SmF2YQcAcAwAcQByDAAvADAMAHMAdAwAdQB2DAA4ADwMADgAPQEALm5ldC9uYXdhbWFuL3JlZ3Bh
cnNlci90eXBlcGFja2FnZS9QVHlwZVBhY2thZ2UBAChuZXQvbmF3YW1hbi9yZWdwYXJzZXIvcmVz
dWx0L1BhcnNlUmVzdWx0AQARamF2YS9sYW5nL0ludGVnZXIBABBqYXZhL2xhbmcvU3RyaW5nAQAo
bmV0L25hd2FtYW4vcmVncGFyc2VyL0NvbXBpbGF0aW9uQ29udGV4dAEAI25ldC9uYXdhbWFuL3Jl
Z3BhcnNlci9QVHlwZVByb3ZpZGVyDAB3ADAMAHgAeQwAegB7DAB8AH0MAH4AfwEAAAwAgACBAQAW
amF2YS9sYW5nL1N0cmluZ0J1ZmZlcgwAggB5DACDAHsBAAgkQ2hhcnoAAAQAc1tdDACEAIUMAIYA
hwEACiNFc2NhcGVDaHIMAIgAiQwAhgCKDACLADABACFMaXRlcmFsX1N0cmluZ0NvbXBpbGVyXzE1
NjMzMzI1NzkBABBqYXZhL2xhbmcvT2JqZWN0AQAnbmV0L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9u
JFNpbXBsZSRCb2R5AQAEQm9keQEAFGphdmEvaW8vU2VyaWFsaXphYmxlBwCMAQAibmV0L25hd2Ft
YW4vc2NyaXB0L0Z1bmN0aW9uJFNpbXBsZQEAE1tMamF2YS9sYW5nL09iamVjdDsHAI0BAB9uZXQv
bmF3YW1hbi9zY3JpcHQvU2NvcGUkU2ltcGxlAQADKClWAQAgbmV0L25hd2FtYW4vc2NyaXB0L1Nj
cmlwdE1hbmFnZXIBAAhJbnN0YW5jZQEAIkxuZXQvbmF3YW1hbi9zY3JpcHQvU2NyaXB0TWFuYWdl
cjsBABhnZXRFbmdpbmVDbGFzc05hbWVCeU5hbWUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZh
L2xhbmcvU3RyaW5nOwEAEmdldERlZmF1bHRFbmdpbmVPZgEANShMamF2YS9sYW5nL1N0cmluZzsp
TG5ldC9uYXdhbWFuL3NjcmlwdC9TY3JpcHRFbmdpbmU7AQAOb3JpZ2luYWxTdHJpbmcBAAhpbnRW
YWx1ZQEAAygpSQEABnRleHRPZgEAFShJKUxqYXZhL2xhbmcvU3RyaW5nOwEABXN1Yk9mAQAtKEkp
TG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9yZXN1bHQvUGFyc2VSZXN1bHQ7AQAMZ2V0TWFpblNjb3Bl
AQAjKClMbmV0L25hd2FtYW4vc2NyaXB0L1Njb3BlJFNpbXBsZTsBAA1lbnN1cmVOb0Vycm9yAQBS
KExuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUFR5cGVQcm92aWRlcjtMbmV0L25hd2FtYW4vcmVncGFy
c2VyL0NvbXBpbGF0aW9uQ29udGV4dDspWgEACmVudHJ5Q291bnQBAAZuYW1lT2YBAAZlcXVhbHMB
ABUoTGphdmEvbGFuZy9PYmplY3Q7KVoBAAZhcHBlbmQBACwoTGphdmEvbGFuZy9TdHJpbmc7KUxq
YXZhL2xhbmcvU3RyaW5nQnVmZmVyOwEAB3ZhbHVlT2YBAGQoSUxuZXQvbmF3YW1hbi9yZWdwYXJz
ZXIvUFR5cGVQcm92aWRlcjtMbmV0L25hd2FtYW4vcmVncGFyc2VyL0NvbXBpbGF0aW9uQ29udGV4
dDspTGphdmEvbGFuZy9PYmplY3Q7AQAsKExqYXZhL2xhbmcvT2JqZWN0O3oAAAQAKUxqYXZhL2xh
bmcvU3RyaW5nQnVmZmVyOwEACHRvU3RyaW5nAQAbbmV0L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9u
AQAYbmV0L25hd2FtYW4vc2NyaXB0L1Njb3BlACEAIwAkAAIAJQAmAAIAEAAnACgAAAAQACkAKgAA
AAgAAQArACwAAQAtAAAAJwACAAQAAAAPKrcAASortQACKiy1AAOxAAAAAQAuAAAABgABAAAAAQAB
AC8AMAABAC0AAAAbAAEAAQAAAAMSBLAAAAABAC4AAAAGAAEAAAABAAEAMQAyAAEALQAAACYAAgAB
AAAADrIABSq2AAa4AAe2AAiwAAAAAQAuAAAABgABAAAAAQABADMAMAABAC0AAAAdAAEAAQAAAAUq
tAADsAAAAAEALgAAAAYAAQAAAAEAAQA0ADUAAQAtAAAAHQABAAEAAAAFKrQAArAAAAABAC4AAAAG
AAEAAAABAIIANgA3AAEALQAAAB8AAwACAAAAByoBK7YACbAAAAABAC4AAAAGAAEAAAABAIEAOAA8
AAEALQAAACAABAADAAAACCoDKyy2AAqwAAAAAQAuAAAABgABAAAAAQCBADgAPQABAC0AAAFuAAUA
EwAAANUtAzLAAAs6BC0EMsAADDoFLQUywAANOgYtBjLAAA46By0HMsAADzoILQgywAAQOgkZBbYA
EToLGQUZBrYAErYAEzoMGQUZBrYAErYAFDoNGQS2ABU6DhkNxwAGEhawGQ3GABEZDRkEGQi2ABea
AAUBsLsAGFm3ABk6DxkNtgAaNhADNhEVERUQogBHGQ0VEbYAGzoSEhwZErYAHZkAExkPGQ0VEbYA
E7YAHlenAB4SHxkStgAdmQAUGQ8ZDRURGQQZCLYAILYAIVeEEQGn/7gZD7YAIrAAAAACAC4AAAA6
AA4AAAABADAAAgBWAAQAXgAHAHEACgB6AAsAgQAMAIsADQCUAA4AngAPAK4AEQC4ABIAyQAMAM8A
FgA+AAAARwAG/wBeAA8HACMBBwA5BwA/BwALBwAMBwANBwAOBwAPBwAQAAcADgcADgcADAcAQAAA
Ev4AEgcAGAEB/AApBwAO+gAa+gAFAAIAQQAAAAIAQgA7AAAAGgADADkAagA6BAkAJQA5AGgGCQBA
AG0AOgAJcHVyACVbTG5ldC5uYXdhbWFuLmphdmFjb21waWxlci5DbGFzc0RhdGE7Ta2XvtRHiC8C
AAB4cAAAAABwdAAnTGl0ZXJhbF9TdHJpbmdDb21waWxlcl8xNTYzMzMyNTc5LmNsYXNzdAAAdXEA
fgAAAAADu6ztAAV1cgAXW0xqYXZhLmlvLlNlcmlhbGl6YWJsZTuu0AmsU9ftSXoAAAQAAgAAeHAA
AAABc3IAIUxpdGVyYWxfU3RyaW5nQ29tcGlsZXJfMTU2MzMzMjU3Obx6R9okIx+9AgACTAAFJENv
ZGV0ABJMamF2YS9sYW5nL1N0cmluZztMAAokU2lnbmF0dXJldAAeTG5ldC9uYXdhbWFuL3Njcmlw
dC9TaWduYXR1cmU7eHBwc3IAI25ldC5uYXdhbWFuLnNjcmlwdC5TaWduYXR1cmUkU2ltcGxlJmsg
DzRSghUCAARaAAlJc1ZhckFyZ3NMAAROYW1lcQB+AANbAApQYXJhbVR5cGVzdAASW0xqYXZhL2xh
bmcvQ2xhc3M7TAAKUmV0dXJuVHlwZXQAEUxqYXZhL2xhbmcvQ2xhc3M7eHAAdAAWTGl0ZXJhbF9T
dHJpbmdDb21waWxlcnVyABJbTGphdmEubGFuZy5DbGFzczurFteuy81amQIAAHhwAAAABnZyAC5u
ZXQubmF3YW1hbi5yZWdwYXJzZXIudHlwZXBhY2thZ2UuUFR5cGVQYWNrYWdlcXD2kL7+cB4DAAha
AAhJc0Zyb3plblsADEJ1ZmZlclRvU2F2ZXQAAltCTAAKQ2xhc3NQYXRoc3QAEkxqYXZhL3V0aWwv
VmVjdG9yO0wACUVycm9yTXNnc3QAE0xqYXZhL3V0aWwvVHJlZU1hcDtMAAZLRGF0YXNxAH4AEEwA
CU1vcmVEYXRhc3QAE0xqYXZhL3V0aWwvSGFzaE1hcDtMAAdQTlR5cGVzcQB+ABBMAAZUU3BlY3Nx
AH4AEHhwdnIAKG5ldC5uYXdhbWFuLnJlZ3BhcnNlci5yZXN1bHQuUGFyc2VSZXN1bHQ/DejKt/6h
kgIAAUwAB2VudHJpZXN0ABBMamF2YS91dGlsL0xpc3Q7eHB2cgARamF2YS5sYW5nLkludGVnZXIS
4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwdnIAEGph
dmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnIAKG5ldC5uYXdhbWFuLnJlZ3BhcnNlci5Db21w
aWxhdGlvbkNvbnRleHQAAAAAAAAAAAAAAHhwdnIAI25ldC5uYXdhbWFuLnJlZ3BhcnNlci5QVHlw
ZVByb3ZpZGVyCACJkgQd6g4CAAB4cHZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHhx
AH4ABXBxAH4AQnNxAH4AVQAAAABwcQB+AAVwc3EAfgBcdXEAfgBgAAAAAXNxAH4AaXNxAH4AmXVx
AH4AnAAAAAJxAH4AjnNxAH4AewAJcQB+AIFxAH4ABXEAfgBCcQB+AEZzcQB+AFUAAHoAAAQAAABw
cQB+AAVwc3EAfgBcdXEAfgBgAAAAAXNxAH4AaXNxAH4AmXVxAH4AnAAAAAJxAH4AjnEAfgHxc3EA
fgByAAAAAf////9xAH4Ad3EAfgAFcQB+AEZxAH4ASnNxAH4BSwAAAABwcQB+AAVwc3EAfgBcdXEA
fgBgAAAAAnNyACZuZXQubmF3YW1hbi5yZWdwYXJzZXIuUlBFbnRyeSRUd29TdGFnZSSWgAo4aTkD
AgACTAAIRGVsZWdhdGV0AB9MbmV0L25hd2FtYW4vcmVncGFyc2VyL1JQRW50cnk7TAAGUGFyc2Vy
cQB+AFp4cQB+AGVzcQB+AGJzcQB+AF11cQB+AGAAAAABc3EAfgBpc3EAfgE/c3EAfgBddXEAfgBg
AAAAAXNxAH4A83NxAH4A9XB0AAtDb21waWxlRGF0YXEAfgCBdAAFJENvZGVzcQB+AF11cQB+AGAA
AAABc3EAfgBjc3EAfgBddXEAfgBgAAAAE3NxAH4AaXNxAH4BP3NxAH4A/nVxAH4BAQAAAAJzcQB+
AIp0AAIjI3EAfgB8cHEAfgCBc3EAfgBjc3EAfgCKdAADIyM6c3EAfgBjc3EAfgCydAACdVVzcQB+
AGNzcQB+ALJ0AAJuTnNxAH4AY3NxAH4AsnQAAmlJc3EAfgBjc3EAfgCydAACdFRzcQB+APNzcQB+
APVwdAAJU3BhY2VzX09wc3EAfgBjcQB+AM5zcQB+AGlzcQB+AT9zcQB+AP51cQB+AQEAAAACc3EA
fgCKdAACIyNxAH4AfHBxAH4AgXNxAH4AY3NxAH4AinQAAiMjc3EAfgBjcQB+AHxzcQB+APJzcQB+
APVwdAAHSWdub3JlZHEAfgCBc3IAL25ldC5uYXdhbWFuLnJlZ3BhcnNlci5SUEVudHJ5JE5hbWVk
RGlyZWN0X1dpdGhREsy0H5RQDHUCAAFMAA1UaGVRdWFudGlmaWVycQB+AGp4cQB+AGJzcQB+AF11
cQB+AGAAAAACc3EAfgBjc3EAfgD+dXEAfgEBAAAAAXNxAH4AXXVxAH4AYAAAAAtzcQB+AGNzcQB+
AIp0AAkjIzpEZWZpbmVzcQB+APNzcQB+APVwdAAJU3BhY2VzX1Jxc3EAfgBjc3EAfgCKdAABI3Nx
AH4A83NxAH4A9XB0AAlTcGFjZXNfT3BzcQB+AGJzcQB+AF11cQB+AGAAAAABc3EAfgBpc3EAfgBw
ADkAMHEAfgH4dAAHJE51bWJlcnNxAH4A83NxAH4A9XB0AAlTcGFjZXNfT3BzcQB+AGNzcQB+AIp0
AAE6c3EAfgDzc3EAfgD1cHQACVNwYWNlc19PcHNxAH4BuHNxAH4A9XB0AA5MaXRlcmFsX3oAAAQA
U3RyaW5ndAAFI1RleHRzcQB+APNzcQB+APVwdAANRW5kX1NlbWljb2xvbnNxAH4AaXEAfgEwcQB+
AIFzcQB+AF11cQB+AGAAAAABc3EAfgBic3EAfgBddXEAfgBgAAAAAnNxAH4AaXNxAH4AXXVxAH4A
YAAAAAJzcQB+AGNzcQB+AHsAI3NxAH4AY3NxAH4AinQACyM6SW5jbHVkZWRzcQB+AHRzcQB+AGlz
cQB+AGxzcQB+AHsAO3EAfgH4dAAaJEVSUk9SX0ludmFsaWRfZGVmaW5lX3RleHRzcQB+APJzcQB+
APVwdAAHSWdub3JlZHEAfgCBdAAII0RlZmluZSpxAH4AgXNxAH4AY3NxAH4AinQADCMjOkluY2x1
ZGVkc3NxAH4A83NxAH4A9XB0AAlTcGFjZXNfT3BzcQB+AGNxAH4AkHNxAH4A83NxAH4A9XB0AANF
T0xzcQB+AGlzcQB+AF11cQB+AGAAAAACc3EAfgDyc3EAfgD1cHQAB0lnbm9yZWRxAH4AgXNxAH4B
/HNxAH4AYnNxAH4AXXVxAH4AYAAAAANzcQB+AGlzcQB+AGxzcQB+AJl1cQB+AJwAAAACc3EAfgB7
ADtxAH4ApnEAfgH4c3EAfgDzc3EAfgD1cHQADUVuZF9TZW1pY29sb25zcQB+APJzcQB+APVwdAAH
SWdub3JlZHEAfgCBdAANJEluY2x1ZGVkUGF0aHNxAH4AXXVxAH4AYAAAAAFzcQB+AGNzcQB+AP51
cQB+AQEAAAABc3EAfgBddXEAfgBgAAAAAnNxAH4BuHNxAH4A9XB0AAxXaWxkQ2FyZFBhdGh0AA0j
SW5jbHVkZWRQYXRoc3EAfgDzc3EAfgD1cHQADUVuZF9TZW1pY29sb25zcQB+AF11cQB+AGAAAAAB
c3EAfgBic3EAfgBddXEAfgBgAAAAAXNxAH4AaXEAfgBxcQB+AIF0ABskRVJST1JfSW52YWxpZF9p
bmNsdWRlX3BhdGhxAH4AgXNxAH4AY3EAfgCmc3EAfgBpc3EAfgBddXEAfgBgAAAAAnNxAH4AYnNx
AH4AXXVxAH4AYAAAAAFzcQB+AGlzcQB+AGxxAH4AcXEAfgB0dAAIJEVuZFRleHRzcQB+AbhzcQB+
APVwdAALQ29tcGlsZURhdGF0AA0jQ29tcGlsZURhdGEqc3EAfgByAAAAAAAAAAFxAH4Ad3EAfgAF
cQB+AEpzcQB+AZBzcQB+AZRxAH4BmXVxAH4ADgAAAAZxAH4Bm3EAfgGccQB+AZ1xAH4BnnEAfgGf
cQB+AaB3DAAKSkNPLU5FRURFRHVxAH4BoQAAFeis7QAFdxkACkpDTy1ORUVERUQAA0pDTwAAAHoA
AAQAZAAAAAF1cgACW0Ks8xf4BghU4AIAAHhwAAAR8aztAAVzcgAibmV0Lm5hd2FtYW4uamF2YWNv
bXBpbGVyLkNsYXNzRGF0YVFeHaOMW6kDAgAGWwAFYnl0ZXN0AAJbQkwABGNvZGV0ABJMamF2YS9s
YW5nL1N0cmluZztbAA9lbmNsb3NlZENsYXNzZXN0ACVbTG5ldC9uYXdhbWFuL2phdmFjb21waWxl
ci9DbGFzc0RhdGE7TAAOZW5jbG9zaW5nQ2xhc3N0ACRMbmV0L25hd2FtYW4vamF2YWNvbXBpbGVy
L0NsYXNzRGF0YTtMAARuYW1lcQB+AAJMAARwYXRocQB+AAJ4cHVyAAJbQqzzF/gGCFTgAgAAeHAA
ABCJyv66vgAAADcAzwoAMwBYCQA4AFkJADgAWggAWwkAXABdCgA4AF4KAFwAXwoAXABgCgA4AGEK
ADgAYgcAYwcAZAcAZQcAZgcAZwcAaAoADABpCgANAGoKAAwAawoADABsCgALAG0IAG4KAAwAbwgA
cAoADABxCAByCgANAHMIAHQIAHUIAHYKAA4AdwoAeAB5CgAOAHoIAHsIAHwIAH0KAAwAfggAfwoA
DACACACBCgANAIIJAIMAhAgAhQoAhgCHBwCICgAtAFgKADMAiQoADgCKCgAOAIsKAC0AjAcAjQoA
LQCOCgAtAI8KAJAAkQgAkgcAkwcAlAcAlgEABSRDb2RlAQASTGphdmEvbGFuZy9TdHJpbmc7AQAK
JFNpZ25hdHVyZQEAHkxuZXQvbmF3YW1hbi9zY3JpcHQvU2lnbmF0dXJlOwEABjxpbml0PgEATShM
bmV0L25hd2FtYW4vc2NyaXB0L1NpZ25hdHVyZTtMamF2YS9sYW5nL1N0cmluZztMbmV0L25hd2Ft
YW4vc2NyaXB0L1Njb3BlOylWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADWdldEVuZ2luZU5h
bWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACWdldEVuZ2luZQEAIygpTG5ldC9uYXdhbWFuL3Nj
cmlwdC9TY3JpcHRFbmdpbmU7AQAHZ2V0Q29kZQEADGdldFNpZ25hdHVyZQEAICgpTG5ldC9uYXdh
bWFuL3NjcmlwdC9TaWduYXR1cmU7AQAFJFNlbGYBACcoW0xqYXZhL2xhbmcvT2JqZWN0OylMamF2
YS9sYW5nL09iamVjdDsBAANydW4HAJgBAAZTaW1wbGUBAAxJbm5lckNsYXNzZXMBAEsoTG5ldC9u
YXdhbWFuL3NjcmlwdC9GdW5jdGlvbiRTaW1wbGU7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9s
YXoAAAQAbmcvT2JqZWN0OwEATChJTG5ldC9uYXdhbWFuL3NjcmlwdC9GdW5jdGlvbiRTaW1wbGU7
W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAA1TdGFja01hcFRhYmxlBwCZ
BwCbBwCcAQAKU291cmNlRmlsZQEAJFVuaXREZXNjRmlsZUNvbXBpbGVyXzE1NjMzMzI1NzguamF2
YQwAPwCdDAA9AD4MADsAPAEABEphdmEHAJ4MAJ8AoAwAQwBEDAChAKIMAKMApAwATABQDABMAFEB
AC5uZXQvbmF3YW1hbi9yZWdwYXJzZXIvdHlwZXBhY2thZ2UvUFR5cGVQYWNrYWdlAQAobmV0L25h
d2FtYW4vcmVncGFyc2VyL3Jlc3VsdC9QYXJzZVJlc3VsdAEAEWphdmEvbGFuZy9JbnRlZ2VyAQAQ
amF2YS9sYW5nL1N0cmluZwEAKG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9Db21waWxhdGlvbkNvbnRl
eHQBACNuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUFR5cGVQcm92aWRlcgwApQBEDACmAKcMAKgAqQwA
qgCrDACsAK0BAAwkQ29tcGlsZURhdGEMAKgAogEACCRFbmRUZXh0DACuAK8BAAckQ09VTlQxDACw
ALEBAAgkRW5kQ1N0cgEACiRTdGFydENTdHIBAAckQ09VTlQyDACyALMHALQMALUAogwAtgBEAQAG
JEhBU0gxAQAGJEhBU0gyAQAHJE51bWJlcgwAtwC4AQAFI1RleHQMALkAugEADSNJbmNsdWRlZFBh
dGgMALAArwcAuwwAvAC9AQBGSW52YWxpZCBkZWZpbmUgbnVtYmVyaW5nLiBJdCBtdXN0IHN0YXJ0
cyBmcm9tIG9uZSBhbmQgaW5jcmVhc2UgYnkgb25lLgcAvgwAvwDAAQAQamF2YS91dGlsL1ZlY3Rv
cgwAwQBEDADCAKcMAMMAxAwAxQDGAQAQamF2YS9sYW5nL09iamVjdAwAxwCnDADIAMkHAMoMAMsA
zAEAByRCQVNFNjQBAB9Vbml0RGVzY0ZpbGVDb21waWxlcl8xNTYzMzMyNTc4AQAnbmV0L25hd2Ft
YW4vc2NyaXB0L0Z1bmN0aW9uJFNpbXBsZSRCb2R5AQAEQm9keQEAFGphdmEvaW8vU2VyaWFsaXph
YmxlBwDNAQAibmV0L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9uJFNpbXBsZQEAE1tMamF2YS9sYW5n
L09iamVjdDsHAM4BAB9uZXQvbmF3YW1hbi9zY3JpcHQvU2NvcGUkU2ltcGxlAQATW0xqYXZhL2xh
bmcvU3oAAAQAdHJpbmc7AQADKClWAQAgbmV0L25hd2FtYW4vc2NyaXB0L1NjcmlwdE1hbmFnZXIB
AAhJbnN0YW5jZQEAIkxuZXQvbmF3YW1hbi9zY3JpcHQvU2NyaXB0TWFuYWdlcjsBABhnZXRFbmdp
bmVDbGFzc05hbWVCeU5hbWUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5n
OwEAEmdldERlZmF1bHRFbmdpbmVPZgEANShMamF2YS9sYW5nL1N0cmluZzspTG5ldC9uYXdhbWFu
L3NjcmlwdC9TY3JpcHRFbmdpbmU7AQAOb3JpZ2luYWxTdHJpbmcBAAhpbnRWYWx1ZQEAAygpSQEA
BnRleHRPZgEAFShJKUxqYXZhL2xhbmcvU3RyaW5nOwEABXN1Yk9mAQAtKEkpTG5ldC9uYXdhbWFu
L3JlZ3BhcnNlci9yZXN1bHQvUGFyc2VSZXN1bHQ7AQAMZ2V0TWFpblNjb3BlAQAjKClMbmV0L25h
d2FtYW4vc2NyaXB0L1Njb3BlJFNpbXBsZTsBAAVwb3NPZgEAFShMamF2YS9sYW5nL1N0cmluZzsp
SQEACHBhcnNlSW50AQAWKExqYXZhL2xhbmcvU3RyaW5nO0kpSQEACXN1YnN0cmluZwEAFihJSSlM
amF2YS9sYW5nL1N0cmluZzsBABhuZXQvbmF3YW1hbi9zY3JpcHQvVG9vbHMBAAtHZXRIYXNoVGV4
dAEABHRyaW0BAAd0ZXh0c09mAQAnKExqYXZhL2xhbmcvU3RyaW5nOylbTGphdmEvbGFuZy9TdHJp
bmc7AQAIdmFsdWVzT2YBAHYoTGphdmEvbGFuZy9TdHJpbmc7TG5ldC9uYXdhbWFuL3JlZ3BhcnNl
ci9QVHlwZVByb3ZpZGVyO0xuZXQvbmF3YW1hbi9yZWdwYXJzZXIvQ29tcGlsYXRpb25Db250ZXh0
OylbTGphdmEvbGFuZy9PYmplY3Q7AQAQamF2YS9sYW5nL1N5c3RlbQEAA2VycgEAFUxqYXZhL2lv
L1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xh
bmcvU3RyaW5nOylWAQAIdG9TdHJpbmcBAAZsZW5ndGgBAAZmb3JtYXQBADkoTGphdmEvbGFuZy9T
dHJpbmc7W0xqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL1N0cmluZzsBAANhZGQBABUoTGph
dmEvbGFuZy9PYmplY3Q7KVoBAARzaXplAQAHdG9BcnJheQEAKChbTGphdmEvbGFuZy9PYmplY3Q7
KVtMamF2YXoAAAQAL2xhbmcvT2JqZWN0OwEAEWphdmEvbGFuZy9Cb29sZWFuAQAHdmFsdWVPZgEA
FihaKUxqYXZhL2xhbmcvQm9vbGVhbjsBABtuZXQvbmF3YW1hbi9zY3JpcHQvRnVuY3Rpb24BABhu
ZXQvbmF3YW1hbi9zY3JpcHQvU2NvcGUAIQA4ADMAAgA5ADoAAgAQADsAPAAAABAAPQA+AAAACAAB
AD8AQAABAEEAAAAnAAIABAAAAA8qtwABKiu1AAIqLLUAA7EAAAABAEIAAAAGAAEAAAADAAEAQwBE
AAEAQQAAABsAAQABAAAAAxIEsAAAAAEAQgAAAAYAAQAAAAMAAQBFAEYAAQBBAAAAJgACAAEAAAAO
sgAFKrYABrgAB7YACLAAAAABAEIAAAAGAAEAAAADAAEARwBEAAEAQQAAAB0AAQABAAAABSq0AAOw
AAAAAQBCAAAABgABAAAAAwABAEgASQABAEEAAAAdAAEAAQAAAAUqtAACsAAAAAEAQgAAAAYAAQAA
AAMAggBKAEsAAQBBAAAAHwADAAIAAAAHKgErtgAJsAAAAAEAQgAAAAYAAQAAAAMAgQBMAFAAAQBB
AAAAIAAEAAMAAAAIKgMrLLYACrAAAAABAEIAAAAGAAEAAAADAIEATABRAAEAQQAAA44ABQAYAAAC
CC0DMsAACzoELQQywAAMOgUtBTLAAA06Bi0GMsAADjoHLQcywAAPOggtCDLAABA6CRkFtgAROgsZ
BRkGtgAStgATOgwZBRkGtgAStgAUOg0ZBLYAFToOAzYPGQ0SFrYAF8YAqxkNEhi2ABk2EBkNEhq2
ABcQELgAGzYRFRAVEaAAjRkNEhy2ABkZDRIdtgAZZARgNhIZDRIetgAXEBC4ABs2ExUSFROgAGUZ
DAMVELYAH7gAILYAIRAQuAAbNhQZDRIitgAXEBC4ABs2FRUUFRWgADsZDBkNEh22ABkZDRIctgAZ
tgAfuAAgtgAhEBC4ABs2FhkNEiO2ABcQELgAGzYXFRYVF6AABgQ2DxkMOhAZDRIYtgAXxgASGQwD
GQ0SGLYAGbYAHzoQGQ0SJLYAJToRGQ0SJhkEGQi2ACc6EhkNEigZBBkItgAnOhMENhQVFBkRxwAH
A6cABhkRvqMAKRkRFRQEZDK4ACk2FRUVFRSgAAanAA2yACoSK7YALAGwhBQBp//MuwAtWbcALjoU
GRPGAEIDNhUVFRkTvqIANxkTFRUyOhYZFscABqcAIhkWtgAvOhcZF7YAMJoABqcAEBkUGRcZErgA
MbYAMleEFQGn/8cIvQAzWQMZEFNZBBkUGRS2ADS9AA62ADVTWQUVD7gANlNZBhkNEje2ABdTWQcZ
DRIitgAXU7AAAHoAAAQAAAIAQgAAAJIAJAAAAAMAVgAGAFkACABjAAkAbAAKAHoADACBAA0AlAAO
AKIAEACpABEAvgASAMwAFADTABUA8wAWAQEAGAELACABDwAhASgAJAExACUBPgAmAUsAKQFfACoB
awArAXUALQF9AC4BfwApAYUAMQGOADMBkwA0AZ4ANQGlADYBrQA4AbQAOQG/ADsBzAA0AdIAPwBS
AAAA3AAN/wELABAHADgBBwBNBwBTBwALBwAMBwANBwAOBwAPBwAQAAcADgcADgcADAcAVAEAAPwA
HAcADv8AJQAVBwA4AQcATQcAUwcACwcADAcADQcADgcADwcAEAAHAA4HAA4HAAwHAFQBBwAOBwBV
BwBTBwBTAQAASgH/AAIAFQcAOAEHAE0HAFMHAAsHAAwHAA0HAA4HAA8HABAABwAOBwAOBwAMBwBU
AQcADgcAVQcAUwcAUwEAAgEB/AAYAfoACfoABf0AEAcALQH8ABYHADP8ABEHAA75AAz6AAUAAgBW
AAAAAgBXAE8AAAAaAAMATQCXAE4ECQA5AE0AlQYJAFQAmgBOAAlwdXIAJVtMbmV0Lm5hd2FtYW4u
amF2YWNvbXBpbGVyLkNsYXNzRGF0YTtNrZe+1EeILwIAAHhwAAAAAHB0ACVVbml0RGVzY0ZpbGVD
b21waWxlcl8xNTYzMzMyNTc4LmNsYXNzdAAAdXEAfgAAAAADt6ztAAV1cgAXW0xqYXZhLmlvLlNl
cmlhbGl6YWJsZTuu0AmsU9ftSQIAAHhwAAAAAXNyAB9Vbml0RGVzY0ZpbGVDb21waWxlcl8xNTYz
MzMyNTc4w7X3mDpKhogCAAJMAAUkQ29kZXQAEkxqYXZhL2xhbmcvU3RyaW5nO0wACiRTaWduYXR1
cmV0AB5MbmV0L25hd2FtYW4vc2NyaXB0L1NpZ25hdHVyZTt4cHBzcgAjbmV0Lm5hd2FtYW4uc2Ny
aXB0LlNpZ25hdHVyZSRTaW1wbGUmayAPNFKCFQIABFoACUlzVmFyQXJnc0wABE5hbWVxAH4AA1sA
ClBhcmFtVHlwZXN0ABJbTGphdmEvbGFuZy9DbGFzcztMAApSZXR1cm5UeXBldAARTGphdmEvbGFu
Zy9DbGFzczt4cAB0ABRVbml0RGVzY0ZpbGVDb21waWxlcnVyABJbTGphdmEubGFuZy5DbGFzczur
Fteuy81amQIAAHhwAAAABnZyAC5uZXQubmF3YW1hbi5yZWdwYXJzZXIudHlwZXBhY2thZ2UuUFR5
cGVQYWNrYWdlcXD2kL7+cB4DAAhaAAhJc0Zyb3plblsADEJ1ZmZlclRvU2F2ZXQAAltCTAAKQ2xh
c3NQYXRoc3QAEkxqYXoAAAQAdmEvdXRpbC9WZWN0b3I7TAAJRXJyb3JNc2dzdAATTGphdmEvdXRp
bC9UcmVlTWFwO0wABktEYXRhc3EAfgAQTAAJTW9yZURhdGFzdAATTGphdmEvdXRpbC9IYXNoTWFw
O0wAB1BOVHlwZXNxAH4AEEwABlRTcGVjc3EAfgAQeHB2cgAobmV0Lm5hd2FtYW4ucmVncGFyc2Vy
LnJlc3VsdC5QYXJzZVJlc3VsdD8N6Mq3/qGSAgABTAAHZW50cmllc3QAEExqYXZhL3V0aWwvTGlz
dDt4cHZyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5n
Lk51bWJlcoaslR0LlOCLAgAAeHB2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cgAo
bmV0Lm5hd2FtYW4ucmVncGFyc2VyLkNvbXBpbGF0aW9uQ29udGV4dAAAAAAAAAAAAAAAeHB2cgAj
bmV0Lm5hd2FtYW4ucmVncGFyc2VyLlBUeXBlUHJvdmlkZXIIAImSBB3qDgIAAHhwdnIAEGphdmEu
bGFuZy5PYmplY3QAAAAAAAAAAAAAAHhweHEAfgAFcHEAfgBPc3EAfgFLAAAAAHBxAH4ABXBzcQB+
AFx1cQB+AGAAAAABc3EAfgBpc3EAfgD+dXEAfgEBAAAAAXNxAH4A/nVxAH4BAQAAAAFzcQB+AP51
cQB+AQEAAAABc3EAfgD+dXEAfgEBAAAAAXNxAH4A/nVxAH4BAQAAAAFzcQB+AP51cQB+AQEAAAAB
c3EAfgBddXEAfgBgAAAAAXNxAH4AYnNxAH4AewA/dAANJFF1ZXN0aW9uTWFya3NxAH4AXXVxAH4A
YAAAAAFzcQB+AGJzcQB+AHsAfnQABiRUaWxkZXNxAH4AXXVxAH4AYAAAAAFzcQB+AGJzcQB+AF11
cQB+AGAAAAACc3EAfgBjcQB+AIBzcQB+AGNxAH4AgHQADyREb3VibGVBc3Rlcmlza3NxAH4AXXVx
AH4AYAAAAAFzcQB+AGJzcQB+AF11cQB+AGAAAAACc3EAfgBjcQB+AIBzcQB+AGlxAH4AgHEAfgB0
dAAJJEFzdGVyaXNrc3EAfgBddXEAfgBgAAAAAXNxAH4AYnNxAH4AXXVxAH4AYAAAAAdzcQB+AGNz
cQB+AHsAW3NxAH4AaXEAfgCzcQB+AIFzcQB+AGNxAH4CanNxAH4AaXEAfgCzcQB+AIFzcQB+AGJz
cQB+AF11cQB+AGAAAAABc3EAfgBpc3EAfgBwADkAMHEAfgH4dAAHJE51bWJlcnNxAH4AaXEAfgCz
cQB+AIFzcQB+AGNzcQB+AHoAAAQAewBddAAII1JlcGxhY2VzcQB+AF11cQB+AGAAAAABc3EAfgBi
c3EAfgCZdXEAfgCcAAAAA3NxAH4AcAA5ADBzcQB+AHAAegBhc3EAfgBwAFoAQXQACSRPdGhlcnNb
XXNxAH4AXXVxAH4AYAAAAAFzcQB+AGJzcQB+AGxxAH4AznQACyRQdW50dWF0aW9ucQB+AfhxAH4A
BXEAfgBPc3EAfgGQc3EAfgGUcQB+AZl1cQB+AA4AAAAGcQB+AZtxAH4BnHEAfgGdcQB+AZ5xAH4B
n3EAfgGgdwwACkpDTy1ORUVERUR1cQB+AaEAABFZrO0ABXcZAApKQ08tTkVFREVEAANKQ08AAABk
AAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAA1irO0ABXNyACJuZXQubmF3YW1hbi5qYXZhY29tcGls
ZXIuQ2xhc3NEYXRhUV4do4xbqQMCAAZbAAVieXRlc3QAAltCTAAEY29kZXQAEkxqYXZhL2xhbmcv
U3RyaW5nO1sAD2VuY2xvc2VkQ2xhc3Nlc3QAJVtMbmV0L25hd2FtYW4vamF2YWNvbXBpbGVyL0Ns
YXNzRGF0YTtMAA5lbmNsb3NpbmdDbGFzc3QAJExuZXQvbmF3YW1hbi9qYXZhY29tcGlsZXIvQ2xh
c3NEYXRhO0wABG5hbWVxAH4AAkwABHBhdGhxAH4AAnhwdXIAAltCrPMX+AYIVOACAAB4cAAAC/rK
/rq+AAAANwCVCgAqAEkJACkASgkAKQBLCABMCQBNAE4KACkATwoATQBQCgBNAFEKACkAUgoAKQBT
BwBUBwBVBwBWBwBXBwBYBwBZCgAMAFoKAA0AWwoADABcCgAMAF0KAAsAXgcAXwoAFgBJCgAMAGAK
AAwAYQoADgBiCABjCgAWAGQIAGUIAGYIAGcIAGgIAGkIAGoIAGsIAGwKAAwAbQgAbggAbwoAFgBw
BwBxBwByBwBzBwB1AQAFJENvZGUBABJMamF2YS9sYW5nL1N0cmluZzsBAAokU2lnbmF0dXJlAQAe
TG5ldC9uYXdhbWFuL3NjcmlwdC9TaWduYXR1cmU7AQAGPGluaXQ+AQBNKExuZXQvbmF3YW1hbi9z
Y3JpcHQvU2lnbmF0dXJlO0xqYXZhL2xhbmcvU3RyaW5nO0xuZXQvbmF3YW1hbi9zY3JpcHQvU2Nv
cGU7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQANZ2V0RW5naW5lTmFtZQEAFCgpTGphdmEv
bGFuZy9TdHJpbmc7AQAJZ2V0RW5naW5lAQAjKClMbmV0L25hd2FtYW4vc2NyaXB0L1NjcmlwdEVu
Z2luZTsBAAdnZXRDb2RlAQAMZ3oAAAQAZXRTaWduYXR1cmUBACAoKUxuZXQvbmF3YW1hbi9zY3Jp
cHQvU2lnbmF0dXJlOwEABSRTZWxmAQAnKFtMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9P
YmplY3Q7AQADcnVuBwB3AQAGU2ltcGxlAQAMSW5uZXJDbGFzc2VzAQBLKExuZXQvbmF3YW1hbi9z
Y3JpcHQvRnVuY3Rpb24kU2ltcGxlO1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmpl
Y3Q7AQBMKElMbmV0L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9uJFNpbXBsZTtbTGphdmEvbGFuZy9P
YmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEADVN0YWNrTWFwVGFibGUHAHgHAHoBAApTb3VyY2VG
aWxlAQAkV2lsZENhcmRQYXRoQ29tcGlsZXJfMTU2MzMzMjU3Ny5qYXZhDAAxAHsMAC8AMAwALQAu
AQAESmF2YQcAfAwAfQB+DAA1ADYMAH8AgAwAgQCCDAA+AEIMAD4AQwEALm5ldC9uYXdhbWFuL3Jl
Z3BhcnNlci90eXBlcGFja2FnZS9QVHlwZVBhY2thZ2UBAChuZXQvbmF3YW1hbi9yZWdwYXJzZXIv
cmVzdWx0L1BhcnNlUmVzdWx0AQARamF2YS9sYW5nL0ludGVnZXIBABBqYXZhL2xhbmcvU3RyaW5n
AQAobmV0L25hd2FtYW4vcmVncGFyc2VyL0NvbXBpbGF0aW9uQ29udGV4dAEAI25ldC9uYXdhbWFu
L3JlZ3BhcnNlci9QVHlwZVByb3ZpZGVyDACDADYMAIQAhQwAhgCHDACIAIkMAIoAiwEAF2phdmEv
bGFuZy9TdHJpbmdCdWlsZGVyDACMAIUMAI0AhwwAjgCPAQABLgwAkACRAQACWzoBAAI6XQEAAi4q
AQABKgEAE1teWzovOl1bOlw6XSAgICAgXSoBABNbXls6LzpdWzpcOl1bOi46XV0qAQABJQEAByRO
dW1iZXIMAIYAgAEAAiRzAQAELnswfQwAkgA2AQAfV2lsZENhcmRQYXRoQ29tcGlsZXJfMTU2MzMz
MjU3NwEAEGphdmEvbGFuZy9PYmplY3QBACduZXQvbmF3YW1hbi9zY3JpcHQvRnVuY3Rpb24kU2lt
cGxlJEJvZHkBAARCb2R5AQAUamF2YS9pby9TZXJpYWxpemFibGUHAJMBACJuZXQvbmF3YW1hbi9z
Y3JpcHQvRnVuY3Rpb24kU2ltcGxlAQATW0xqYXZhL2xhbmcvT2JqZWN0OwcAlAEAH25ldC9uYXdh
bWFuL3NjcmlwdC9TY29wZSRTaW1wbHoAAAQAZQEAAygpVgEAIG5ldC9uYXdhbWFuL3NjcmlwdC9T
Y3JpcHRNYW5hZ2VyAQAISW5zdGFuY2UBACJMbmV0L25hd2FtYW4vc2NyaXB0L1NjcmlwdE1hbmFn
ZXI7AQAYZ2V0RW5naW5lQ2xhc3NOYW1lQnlOYW1lAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2
YS9sYW5nL1N0cmluZzsBABJnZXREZWZhdWx0RW5naW5lT2YBADUoTGphdmEvbGFuZy9TdHJpbmc7
KUxuZXQvbmF3YW1hbi9zY3JpcHQvU2NyaXB0RW5naW5lOwEADm9yaWdpbmFsU3RyaW5nAQAIaW50
VmFsdWUBAAMoKUkBAAZ0ZXh0T2YBABUoSSlMamF2YS9sYW5nL1N0cmluZzsBAAVzdWJPZgEALShJ
KUxuZXQvbmF3YW1hbi9yZWdwYXJzZXIvcmVzdWx0L1BhcnNlUmVzdWx0OwEADGdldE1haW5TY29w
ZQEAIygpTG5ldC9uYXdhbWFuL3NjcmlwdC9TY29wZSRTaW1wbGU7AQAKZW50cnlDb3VudAEABm5h
bWVPZgEABmNoYXJBdAEABChJKUMBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZh
L2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEAG25ldC9uYXdhbWFuL3NjcmlwdC9GdW5j
dGlvbgEAGG5ldC9uYXdhbWFuL3NjcmlwdC9TY29wZQAhACkAKgACACsALAACABAALQAuAAAAEAAv
ADAAAAAIAAEAMQAyAAEAMwAAACcAAgAEAAAADyq3AAEqK7UAAiostQADsQAAAAEANAAAAAYAAQAA
AAIAAQA1ADYAAQAzAAAAGwABAAEAAAADEgSwAAAAAQA0AAAABgABAAAAAgABADcAOAABADMAAAAm
AAIAAQAAAA6yAAUqtgAGuAAHtgAIsAAAAAEANAAAAAYAAQAAAAIAAQA5ADYAAQAzAAAAHQABAAEA
AAAFKrQAA7AAAAABADQAAAAGAAEAAAACAAEAOgA7AAEAMwAAAB0AAQABAAAABSq0AAKwAAAAAQA0
AAAABgABAAAAAgCCADwAPQABADMAAAAfAAMAAgAAAAcqASu2AAmwAAAAAQA0AAAABgABAAAAAgCB
AD4AQgABADMAAAAgAAQAAwAAAAgqAysstgAKsAAAAAEANAAAAAYAAQAAAAIAgQA+AEMAAQAzAAAC
RQADABMAAAGdLQMywAALOgQtBDLAAAw6BS0FMsAADToGLQYywAAOOgctBzLAAA86CC0IMsAAEDoJ
GQW2ABE6CxkFGQa2ABK2ABM6DBkFGQa2AHoAAAQAErYAFDoNGQS2ABU6DrsAFlm3ABc6DxkNxwAG
GQywGQ22ABg2EAM2ERURFRCiARoZDRURtgAZBLYAGjYSFRKqAAABAgAAAEEAAABUAAAAygAAAQIA
AAECAAAAkgAAAQIAAAECAAABAgAAAQIAAAECAAABAgAAAQIAAAECAAABAgAAAQIAAABoAAAAeAAA
AF0AAADmAAABAgAAAK4ZDxIbtgAcV6cAnRkPGQ0VEbYAE7YAHFenAI0ZDxIdtgAcGQ0VEbYAE7YA
HBIetgAcV6cAcxkPEh+2ABxXFREVEARknwBiGQ8SILYAHFenAFcZDxIhtgAcVxURFRAEZJ8ARhkP
EiC2ABxXpwA7GQ8SIrYAHFcVERUQBGSfACoZDxIgtgAcV6cAHxkPEiO2ABwZDRURtgAUEiS2ACW2
ABwSJrYAHFeEEQGn/uUZDxIntgAcVxkPtgAosAAAAAIANAAAAEYAEQAAAAIAVgADAF8ABQBnAAcA
bgAIAHgACQCFAAoA5AALAO8ADAD/AA0BGQAOATUADwFRABABbQARAYkACAGPABQBlwAWAEQAAABK
AAv/AGcAEAcAKQEHAD8HAEUHAAsHAAwHAA0HAA4HAA8HABAABwAOBwAOBwAMBwBGBwAWAAD9AAkB
AfwAcgEKDxkbGxv6ABv6AAUAAgBHAAAAAgBIAEEAAAAaAAMAPwB2AEAECQArAD8AdAYJAEYAeQBA
AAlwdXIAJVtMbmV0Lm5hd2FtYW4uamF2YWNvbXBpbGVyLkNsYXNzRGF0YTtNrZe+1EeILwIAAHhw
AAAAAHB0ACVXaWxkQ2FyZFBhdGhDb21waWxlcl8xNTYzMzMyNTc3LmNsYXNzdAAAdXEAfgAAAAAD
t6ztAAV1cgAXW0xqYXZhLmlvLlNlcmlhbGl6YWJsZTuu0AmsU9ftSQIAAHhwAAAAAXNyAB9XaWxk
Q2FyZFBhdGhDb21waWxlcl8xNTYzMzMyNTc3YVBfXNwL0CcCAAJMAAUkQ29kZXQAEkxqYXZhL2xh
bmcvU3RyaW5nO0wACiRTaWduYXR1cmV0AB5MbmV0L25hd2FtYW4vc2NyaXB0L1NpZ25hdHVyZTt4
cHBzcgAjbmV0Lm5hd2FtYW4uc2NyaXB0LlNpZ25hdHVyZSRTaW1wbGUmayAPNFKCFQIABFoACUlz
VmFyQXJnc0wABE5hbWVxAH4AA1sAClBhcmFtVHlwZXN0ABJbTGphdmEvbGFuZy9DbGFzcztMAApS
ZXR1cm5UeXBldAARTGphdmEvbGFuZy9DbGFzczt4cAB0ABRXaWxkQ2FyZFBhdGhDb21waWxlcnVy
ABJbTGphdmEubGFuZy5DbGFzczurFteuy81amXoAAAQAAgAAeHAAAAAGdnIALm5ldC5uYXdhbWFu
LnJlZ3BhcnNlci50eXBlcGFja2FnZS5QVHlwZVBhY2thZ2VxcPaQvv5wHgMACFoACElzRnJvemVu
WwAMQnVmZmVyVG9TYXZldAACW0JMAApDbGFzc1BhdGhzdAASTGphdmEvdXRpbC9WZWN0b3I7TAAJ
RXJyb3JNc2dzdAATTGphdmEvdXRpbC9UcmVlTWFwO0wABktEYXRhc3EAfgAQTAAJTW9yZURhdGFz
dAATTGphdmEvdXRpbC9IYXNoTWFwO0wAB1BOVHlwZXNxAH4AEEwABlRTcGVjc3EAfgAQeHB2cgAo
bmV0Lm5hd2FtYW4ucmVncGFyc2VyLnJlc3VsdC5QYXJzZVJlc3VsdD8N6Mq3/qGSAgABTAAHZW50
cmllc3QAEExqYXZhL3V0aWwvTGlzdDt4cHZyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgAB
SQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHB2cgAQamF2YS5sYW5nLlN0
cmluZ6DwpDh6O7NCAgAAeHB2cgAobmV0Lm5hd2FtYW4ucmVncGFyc2VyLkNvbXBpbGF0aW9uQ29u
dGV4dAAAAAAAAAAAAAAAeHB2cgAjbmV0Lm5hd2FtYW4ucmVncGFyc2VyLlBUeXBlUHJvdmlkZXII
AImSBB3qDgIAAHhwdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhweHEAfgAFcHhzcQB+
AAZwdwQAAAACcQB+AAlzcgAobmV0Lm5hd2FtYW4ucmVncGFyc2VyLnR5cGVwYWNrYWdlLlBUS2lu
ZClsmbrrz1SQAgADTAAERGF0YXQAL0xuZXQvbmF3YW1hbi9yZWdwYXJzZXIvdHlwZXBhY2thZ2Uv
UFRLaW5kJERhdGE7TAAPVHlwZUNvbnN0cnVjdG9ycQB+AZFMAApUeXBlUGFyc2VycQB+AFp4cHEA
fgANc3EAfgGUcQB+AZl1cQB+AA4AAAACcQB+AZt0AAUkU3BlY3cMAApKQ08tTkVFREVEdXEAfgGh
AAARa6ztAAV3GQAKSkNPLU5FRURFRAADSkNPAAAAZAAAAAF1cgACW0Ks8xf4BghU4AIAAHhwAAAN
4KztAAVzcgAibmV0Lm5hd2FtYW4uamF2YWNvbXBpbGVyLkNsYXNzRGF0YVFeHaOMW6kDAgAGWwAF
Ynl0ZXN0AAJbQkwABGNvZGV0ABJMamF2YS9sYW5nL1N0cmluZztbAA9lbmNsb3NlZENsYXNzZXN0
ACVbTG5ldC9uYXdhbWFuL2phdmFjb21waWxlci9DbHoAAAQAYXNzRGF0YTtMAA5lbmNsb3NpbmdD
bGFzc3QAJExuZXQvbmF3YW1hbi9qYXZhY29tcGlsZXIvQ2xhc3NEYXRhO0wABG5hbWVxAH4AAkwA
BHBhdGhxAH4AAnhwdXIAAltCrPMX+AYIVOACAAB4cAAADIvK/rq+AAAANwCICgAfAD4JAB4APwkA
HgBACABBCQBCAEMKAB4ARAoAQgBFCgBCAEYKAB4ARwoAHgBIBwBJBwBKCABLCgAMAEwHAE0IAE4I
AE8IAFAHAFEIAFIKABMAUxIAAABXEgABAFcKAA8AWQcAWgoAWwBcCABdCgAPAF4KABkAXwcAYAcA
YQcAYgcAZAEABSRDb2RlAQASTGphdmEvbGFuZy9TdHJpbmc7AQAKJFNpZ25hdHVyZQEAHkxuZXQv
bmF3YW1hbi9zY3JpcHQvU2lnbmF0dXJlOwEABjxpbml0PgEATShMbmV0L25hd2FtYW4vc2NyaXB0
L1NpZ25hdHVyZTtMamF2YS9sYW5nL1N0cmluZztMbmV0L25hd2FtYW4vc2NyaXB0L1Njb3BlOylW
AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEADWdldEVuZ2luZU5hbWUBABQoKUxqYXZhL2xhbmcv
U3RyaW5nOwEACWdldEVuZ2luZQEAIygpTG5ldC9uYXdhbWFuL3NjcmlwdC9TY3JpcHRFbmdpbmU7
AQAHZ2V0Q29kZQEADGdldFNpZ25hdHVyZQEAICgpTG5ldC9uYXdhbWFuL3NjcmlwdC9TaWduYXR1
cmU7AQAFJFNlbGYBADIoW0xqYXZhL2xhbmcvT2JqZWN0OylMbmV0L25hd2FtYW4vcmVncGFyc2Vy
L1BUeXBlOwEAA3J1bgcAZgEABlNpbXBsZQEADElubmVyQ2xhc3NlcwEAVihMbmV0L25hd2FtYW4v
c2NyaXB0L0Z1bmN0aW9uJFNpbXBsZTtbTGphdmEvbGFuZy9PYmplY3Q7KUxuZXQvbmF3YW1hbi9y
ZWdwYXJzZXIvUFR5cGU7AQBXKElMbmV0L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9uJFNpbXBsZTtb
TGphdmEvbGFuZy9PYmplY3Q7KUxuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUFR5cGU7AQANU3RhY2tN
YXBUYWJsZQcAZwEASyhMbmV0L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9uJFNpbXBsZTtbTGphdmEv
bGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAClNvdXJjZUZpbGUBABFKQzE1NjMzMzI1
NzUuamF2YQwAJgBoDAAkACUMACIAIwEABEphdmEHAGkMAHoAAAQAagBrDAAqACsMAGwAbQwAbgBv
DAAzADcMADMAOAEALm5ldC9uYXdhbWFuL3JlZ3BhcnNlci90eXBlcGFja2FnZS9QVHlwZVBhY2th
Z2UBAChuZXQvbmF3YW1hbi9yZWdwYXJzZXIvdHlwZXBhY2thZ2UvUFRTcGVjAQAETmFtZQwAcABx
AQAQamF2YS9sYW5nL1N0cmluZwEAB0NoZWNrZXIBAApFcnJNZXNzYWdlAQAHSXNGYXRhbAEAHmph
dmEvbGFuZy9OdWxsUG9pbnRlckV4Y2VwdGlvbgEAIFBhcnNlciB0eXBlIG5hbWUgY2Fubm90IGJl
IG51bGwuDAAmAHIBABBCb290c3RyYXBNZXRob2RzDwYAcwgAdAwAdQBtCAB2DAB3ACsBACNuZXQv
bmF3YW1hbi9yZWdwYXJzZXIvdHlwZXMvUFRFcnJvcgcAeAwAeQB6AQAEdHJ1ZQwAewB8DAAmAH0B
AAxKQzE1NjMzMzI1NzUBABBqYXZhL2xhbmcvT2JqZWN0AQAnbmV0L25hd2FtYW4vc2NyaXB0L0Z1
bmN0aW9uJFNpbXBsZSRCb2R5AQAEQm9keQEAFGphdmEvaW8vU2VyaWFsaXphYmxlBwB+AQAibmV0
L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9uJFNpbXBsZQEAE1tMamF2YS9sYW5nL09iamVjdDsBAAMo
KVYBACBuZXQvbmF3YW1hbi9zY3JpcHQvU2NyaXB0TWFuYWdlcgEACEluc3RhbmNlAQAiTG5ldC9u
YXdhbWFuL3NjcmlwdC9TY3JpcHRNYW5hZ2VyOwEAGGdldEVuZ2luZUNsYXNzTmFtZUJ5TmFtZQEA
JihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQASZ2V0RGVmYXVsdEVuZ2lu
ZU9mAQA1KExqYXZhL2xhbmcvU3RyaW5nOylMbmV0L25hd2FtYW4vc2NyaXB0L1NjcmlwdEVuZ2lu
ZTsBAAhnZXRWYWx1ZQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9PYmplY3Q7AQAV
KExqYXZhL2xhbmcvU3RyaW5nOylWCgB/AIABADNDaGVja2VyIG9mIGFuIGVycm9yIHBhcnNlciB0
eXBlIGNhbm5vdCBiZSBudWxsLiAoASkBABdtYWtlQ29uY2F0V2l0aENvbnN0YW50cwEAOUVycm9y
IG1lc3NhZ2Ugb2YgYW4gZXJyb3IgcGFyc2VyIHR5cGUgY2Fubm90IGJlIG51bGwuICgBKQEABHRy
aW0BAB9uZXQvbmF3YW1hbi9yZWdwYXJzZXIvUmVnUGFyc2VyAXoAAAQAAAxuZXdSZWdQYXJzZXIB
AFooTG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9QVHlwZVByb3ZpZGVyO0xqYXZhL2xhbmcvU3RyaW5n
OylMbmV0L25hd2FtYW4vcmVncGFyc2VyL1JlZ1BhcnNlcjsBAAZlcXVhbHMBABUoTGphdmEvbGFu
Zy9PYmplY3Q7KVoBAEcoTGphdmEvbGFuZy9TdHJpbmc7TG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9D
aGVja2VyO0xqYXZhL2xhbmcvU3RyaW5nO1opVgEAG25ldC9uYXdhbWFuL3NjcmlwdC9GdW5jdGlv
bgcAgQwAdQCEAQAkamF2YS9sYW5nL2ludm9rZS9TdHJpbmdDb25jYXRGYWN0b3J5BwCGAQAGTG9v
a3VwAQCYKExqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwO0xqYXZhL2xhbmcv
U3RyaW5nO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZFR5cGU7TGphdmEvbGFuZy9TdHJpbmc7W0xq
YXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL2ludm9rZS9DYWxsU2l0ZTsHAIcBACVqYXZhL2xh
bmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwAQAeamF2YS9sYW5nL2ludm9rZS9NZXRob2RI
YW5kbGVzACEAHgAfAAIAIAAhAAIAEAAiACMAAAAQACQAJQAAAAkAAQAmACcAAQAoAAAAJwACAAQA
AAAPKrcAASortQACKiy1AAOxAAAAAQApAAAABgABAAAABAABACoAKwABACgAAAAbAAEAAQAAAAMS
BLAAAAABACkAAAAGAAEAAAAEAAEALAAtAAEAKAAAACYAAgABAAAADrIABSq2AAa4AAe2AAiwAAAA
AQApAAAABgABAAAABAABAC4AKwABACgAAAAdAAEAAQAAAAUqtAADsAAAAAEAKQAAAAYAAQAAAAQA
AQAvADAAAQAoAAAAHQABAAEAAAAFKrQAArAAAAABACkAAAAGAAEAAAAEAIIAMQAyAAEAKAAAAB8A
AwACAAAAByoBK7YACbAAAAABACkAAAAGAAEAAAAEAIEAMwA3AAEAKAAAACAABAADAAAACCoDKyy2
AAqwAAAAAQApAAAABgABAAAABACBADMAOAABACgAAAEKAAcACgAAAKAtAzLAAAs6BC0EMsAADDoF
GQUSDbYADsAADzoGGQUSELYADsAADzoHGQUSEbYADsAADzoIGQUSErYADsAADzoJGQbHAA27ABNZ
EhS3ABW/GQfHABK7ABNZGQa6ABYAALcAFb8ZCMcAErsAE1kZBroAF3oAAAQAAAC3ABW/GQnGAAoZ
CbYAGDoJuwAZWRkGGQQZB7gAGhkItgAYEhsZCbYAHLcAHbAAAAACACkAAAAqAAoAAAAEABAABgAc
AAcAKAAIADQACQBAAAsATwAMAGMADQB3AA4AgwAPADkAAAAoAAT/AE8ACgcAHgEHADQHADoHAAsH
AAwHAA8HAA8HAA8HAA8AABMTCxBBADMAOwABACgAAAAfAAMAAwAAAAcqKyy2AAmwAAAAAQApAAAA
BgABAAAABAADADwAAAACAD0ANgAAABoAAwA0AGUANQQJACAANABjBgkAggCFAIMAGQBUAAAADgAC
AFUAAQBWAFUAAQBYcHVyACVbTG5ldC5uYXdhbWFuLmphdmFjb21waWxlci5DbGFzc0RhdGE7Ta2X
vtRHiC8CAAB4cAAAAABwdAASSkMxNTYzMzMyNTc1LmNsYXNzdAAAdXEAfgAAAAADS6ztAAV1cgAX
W0xqYXZhLmlvLlNlcmlhbGl6YWJsZTuu0AmsU9ftSQIAAHhwAAAAAXNyAAxKQzE1NjMzMzI1NzWV
zTWwRto7mAIAAkwABSRDb2RldAASTGphdmEvbGFuZy9TdHJpbmc7TAAKJFNpZ25hdHVyZXQAHkxu
ZXQvbmF3YW1hbi9zY3JpcHQvU2lnbmF0dXJlO3hwcHNyACNuZXQubmF3YW1hbi5zY3JpcHQuU2ln
bmF0dXJlJFNpbXBsZSZrIA80UoIVAgAEWgAJSXNWYXJBcmdzTAAETmFtZXEAfgADWwAKUGFyYW1U
eXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO0wAClJldHVyblR5cGV0ABFMamF2YS9sYW5nL0NsYXNz
O3hwAHB1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAJ2cgAubmV0Lm5hd2Ft
YW4ucmVncGFyc2VyLnR5cGVwYWNrYWdlLlBUeXBlUGFja2FnZXFw9pC+/nAeAwAIWgAISXNGcm96
ZW5bAAxCdWZmZXJUb1NhdmV0AAJbQkwACkNsYXNzUGF0aHN0ABJMamF2YS91dGlsL1ZlY3RvcjtM
AAlFcnJvck1zZ3N0ABNMamF2YS91dGlsL1RyZWVNYXA7TAAGS0RhdGFzcQB+AA9MAAlNb3JlRGF0
YXN0ABNMamF2YS91dGlsL0hhc2hNYXA7TAAHUE5UeXBlc3EAfgAPTAAGVFNwZWNzcQB+AA94cHZy
AChuZXQubmF3YW1hbi5yZWdwYXJzZXIudHlwZXBhY2thZ2UuUFRTcGVjjJhm4OxdU8ICAAFMAAVE
YXRhc3EAfgAQeHB2cgAbbmV0Lm5hd2FtYW4ucmVncGFyc2VyLlBUeXBlY3oAAAQANXDcqbxd8wIA
BEkABUZsYWdzTAAKRGVmYXVsdFJlZnQAIExuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUFR5cGVSZWY7
TAAJVFByb3ZpZGVydAAlTG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9QVHlwZVByb3ZpZGVyO0wABlRo
aXNSUHQAIUxuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUmVnUGFyc2VyO3hweHNxAH4AXXVxAH4AYAAA
ABRzcQB+AGNxAH4CanNxAH4AY3NxAH4AinQAA2RlZnNxAH4A8nNxAH4A9XB0AAdJZ25vcmVkcQB+
AfhzcQB+AGNzcQB+AIp0AAVFcnJvcnNxAH4A8nNxAH4A9XB0AAdJZ25vcmVkcQB+AfhzcQB+AGNz
cQB+AIp0AAZwYXJzZXJzcQB+APJzcQB+APVwdAAHSWdub3JlZHEAfgH4c3EAfgBic3EAfgBddXEA
fgBgAAAABXNxAH4AaXNxAH4AewAkcQB+ArlzcQB+APNzcQB+APVwdAAKSWRlbnRpZmllcnNxAH4A
aXNxAH4A/nVxAH4BAQAAAAJxAH4AgHEAfgChcHEAfgK5c3EAfgBpc3EAfgD+dXEAfgEBAAAAAnEA
fgLWcQB+AtFwcQB+ArlzcQB+AGlzcQB+AF11cQB+AGAAAAACc3EAfgBjcQB+Au5zcQB+AGNxAH4C
+nEAfgK5dAAFJE5hbWVzcQB+APJzcQB+APVwdAAHSWdub3JlZHEAfgCBc3EAfgBjc3EAfgB7ADpz
cQB+AGlzcQB+AT9zcQB+AF11cQB+AGAAAAABc3EAfgBjcQB+AHxxAH4AgXNxAH4B/HNxAH4AYnNx
AH4AXXVxAH4AYAAAAAFzcQB+AGlzcQB+AT9zcQB+AF11cQB+AGAAAAABc3EAfgBjc3EAfgBddXEA
fgBgAAAACHNxAH4AY3EAfgB8c3EAfgBjcQB+AmpzcQB+AGNzcQB+AIp0AANlbmRzcQB+APJzcQB+
APVwdAAHSWdub3JlZHEAfgH4c3EAfgBjc3EAfgCKdAADZGVmc3EAfgDyc3EAfgD1cHQAB0lnbm9y
ZWRxAH4B+HNxAH4AY3NxAH4AinQABnBhcnNlcnNxAH4AY3EAfgDOcQB+AIF0AAYjQm9keStzcQB+
AF11cQB+AGAAAAABc3EAfgBjc3EAfgBddXEAfgBgAAAAAXNxAH4AaXNxAH4A/nVxAH4BAQAAAANz
cQB+AF11cQB+AGAAAAABc3EAfgH8c3EAfgBic3EAfgBddXEAfgBgAAAAAXNxAH4AaXNxAH4BP3Nx
AH4AXXVxAH4AYAAAAAFzcQB+AGNzcQB+AF11cQB+AGAAAAAEc3EAfgBjcQB+AHoAAAQAfHNxAH4A
Y3EAfgJqc3EAfgBjc3EAfgD+dXEAfgEBAAAAAnNxAH4AinQACkVyck1lc3NhZ2VzcQB+AIp0AAdJ
c0ZhdGFscHNxAH4AY3EAfgNDcQB+AIF0AAgjQ2hlY2tlcnNxAH4AXXVxAH4AYAAAAAFzcQB+AGNz
cQB+AF11cQB+AGAAAAAHc3EAfgBpc3EAfgBddXEAfgBgAAAAAnNxAH4AaXNxAH4BP3NxAH4AXXVx
AH4AYAAAAAFzcQB+AGNzcQB+AF11cQB+AGAAAAAEc3EAfgBjcQB+AHxzcQB+AGNxAH4CanNxAH4A
Y3NxAH4AinQAB0NoZWNrZXJzcQB+AGNxAH4DQ3EAfgCBc3EAfgBjcQB+AHxxAH4CuXNxAH4AY3EA
fgJqc3EAfgBjc3EAfgCKdAAHQ2hlY2tlcnNxAH4AY3EAfgNDc3EAfgBpc3EAfgBscQB+AHxxAH4A
gXNxAH4AY3EAfgB8c3EAfgBic3EAfgBddXEAfgBgAAAAAXNxAH4AaXEAfgBxcQB+AIF0AAgkQ2hl
Y2tlcnNxAH4AXXVxAH4AYAAAAAFzcQB+AfxzcQB+AGJzcQB+AF11cQB+AGAAAAABc3EAfgBpc3EA
fgE/c3EAfgBddXEAfgBgAAAAAXNxAH4AY3NxAH4AXXVxAH4AYAAAAARzcQB+AGNxAH4AfHNxAH4A
Y3EAfgJqc3EAfgBjc3EAfgD+dXEAfgEBAAAAAnNxAH4AinQAB0NoZWNrZXJzcQB+AIp0AAdJc0Zh
dGFscHNxAH4AY3EAfgNDcQB+AIF0AAsjRXJyTWVzc2FnZXNxAH4AXXVxAH4AYAAAAAFzcQB+AGNz
cQB+AF11cQB+AGAAAAAHc3EAfgBpc3EAfgBddXEAfgBgAAAAAnNxAH4AaXNxAH4BP3NxAH4AXXVx
AH4AYAAAAAFzcQB+AGNzcQB+AF11cQB+AGAAAAAEc3EAfgBjcQB+AHxzcQB+AGNxAH4CanNxAH4A
Y3NxAH4AinQACkVyck1lc3NhZ2VzcQB+AGNxAH4DQ3EAfgCBc3EAfgBjcQB+AHxxAH4CuXNxAH4A
Y3EAfgJqc3EAfgBjc3EAfgCKdAAKRXJyTWVzc2FnZXNxAH4AY3EAfgNDc3EAfgBpc3EAfgBscQB+
AHxxAH4AgXNxAH4AY3EAfgB8c3EAfgBic3EAfgBddXEAfgBgAAAAAXNxAH4AaXEAfgBxcQB+AIF0
AAskRXJyTWVzc2FnZXNxAH4AXXVxAH4AYAAAAAFzcQB+AfxzcQB+AGJzcQB+AF11cQB+AGAAAAAB
c3EAfgBpc3EAfgE/c3EAfgBddXEAfgBgAAAAAXNxAH4AY3NxAH4AXXVxAH4AYAAAAHoAAAQABHNx
AH4AY3EAfgB8c3EAfgBjcQB+AmpzcQB+AGNzcQB+AP51cQB+AQEAAAACc3EAfgCKdAAHQ2hlY2tl
cnNxAH4AinQACkVyck1lc3NhZ2Vwc3EAfgBjcQB+A0NxAH4AgXQACCNJc0ZhdGFsc3EAfgBddXEA
fgBgAAAAAXNxAH4AY3NxAH4AXXVxAH4AYAAAAAdzcQB+AGlzcQB+AF11cQB+AGAAAAACc3EAfgBp
c3EAfgE/c3EAfgBddXEAfgBgAAAAAXNxAH4AY3NxAH4AXXVxAH4AYAAAAARzcQB+AGNxAH4AfHNx
AH4AY3EAfgJqc3EAfgBjc3EAfgCKdAAHSXNGYXRhbHNxAH4AY3EAfgNDcQB+AIFzcQB+AGNxAH4A
fHEAfgK5c3EAfgBjcQB+AmpzcQB+AGNzcQB+AIp0AAdJc0ZhdGFsc3EAfgBjcQB+A0NzcQB+AGlz
cQB+AGxxAH4AfHEAfgCBc3EAfgBjcQB+AHxzcQB+AGJzcQB+AF11cQB+AGAAAAABc3EAfgBpcQB+
AHFxAH4AgXQACCRJc0ZhdGFscHEAfgCBc3EAfgBjcQB+AHxzcQB+AGNxAH4CanNxAH4AY3NxAH4A
inQAA2VuZHNxAH4A8nNxAH4A9XB0AAdJZ25vcmVkcQB+AfhzcQB+AGNzcQB+AIp0AANkZWZzcQB+
APJzcQB+APVwdAAHSWdub3JlZHEAfgH4c3EAfgBjc3EAfgCKdAAGcGFyc2Vyc3EAfgBjcQB+AM5x
AH4AFHNxAH4DD3EAfgAVc3EAfgGUcQB+AZl1cQB+AA4AAAACcQB+AZtxAH4DFHcMAApKQ08tTkVF
REVEdXEAfgGhAAAVB6ztAAV3GQAKSkNPLU5FRURFRAADSkNPAAAAZAAAAAF1cgACW0Ks8xf4BghU
4AIAAHhwAAARfKztAAVzcgAibmV0Lm5hd2FtYW4uamF2YWNvbXBpbGVyLkNsYXNzRGF0YVFeHaOM
W6kDAgAGWwAFYnl0ZXN0AAJbQkwABGNvZGV0ABJMamF2YS9sYW5nL1N0cmluZztbAA9lbmNsb3Nl
ZENsYXNzZXN0ACVbTG5ldC9uYXdhbWFuL2phdmFjb21waWxlci9DbGFzc0RhdGE7TAAOZW5jbG9z
aW5nQ2xhc3N0ACRMbmV0L25hd2FtYW4vamF2YWNvbXBpbGVyL0NsYXNzRGF0YTtMAARuYW1lcQB+
AAJMAARwYXRocQB+AAJ4cHVyAAJbQqzzF/gGCFTgAgAAeHAAABAnyv66vgAAADcAnAoAKABJCQAn
AEoJACcASwgATAkATQBOCgAnAE8KAE0AUAoATQBRCgAnAFIKACcAUwcAVAcAVQgAVgoADHoAAAQA
AFcHAFgIAFkIAFoIAFsHAFwIAF0KABMAXhIAAABiCgBNAGMHAGQKAEQAZQcAZgoAGgBnEgABAGIH
AGkKAB0AZwcAagoAHwBnBwBrCgAhAGwHAG0KACMAbgoAIQBvCgAjAHAHAHEHAHIHAHMHAHUBAAUk
Q29kZQEAEkxqYXZhL2xhbmcvU3RyaW5nOwEACiRTaWduYXR1cmUBAB5MbmV0L25hd2FtYW4vc2Ny
aXB0L1NpZ25hdHVyZTsBAAY8aW5pdD4BAE0oTG5ldC9uYXdhbWFuL3NjcmlwdC9TaWduYXR1cmU7
TGphdmEvbGFuZy9TdHJpbmc7TG5ldC9uYXdhbWFuL3NjcmlwdC9TY29wZTspVgEABENvZGUBAA9M
aW5lTnVtYmVyVGFibGUBAA1nZXRFbmdpbmVOYW1lAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAln
ZXRFbmdpbmUBACMoKUxuZXQvbmF3YW1hbi9zY3JpcHQvU2NyaXB0RW5naW5lOwEAB2dldENvZGUB
AAxnZXRTaWduYXR1cmUBACAoKUxuZXQvbmF3YW1hbi9zY3JpcHQvU2lnbmF0dXJlOwEABSRTZWxm
AQAyKFtMamF2YS9sYW5nL09iamVjdDspTG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9QVHlwZTsBAANy
dW4HAHcBAAZTaW1wbGUBAAxJbm5lckNsYXNzZXMBAFYoTG5ldC9uYXdhbWFuL3NjcmlwdC9GdW5j
dGlvbiRTaW1wbGU7W0xqYXZhL2xhbmcvT2JqZWN0OylMbmV0L25hd2FtYW4vcmVncGFyc2VyL1BU
eXBlOwEAVyhJTG5ldC9uYXdhbWFuL3NjcmlwdC9GdW5jdGlvbiRTaW1wbGU7W0xqYXZhL2xhbmcv
T2JqZWN0OylMbmV0L25hd2FtYW4vcmVncGFyc2VyL1BUeXBlOwEADVN0YWNrTWFwVGFibGUHAHgH
AHkHAHoBAEsoTG5ldC9uYXdhbWFuL3NjcmlwdC9GdW5jdGlvbiRTaW1wbGU7W0xqYXZhL2xhbmcv
T2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAApTb3VyY2VGaWxlAQARSkMxNTYzMzMyNTc2Lmph
dmEMAC8AewwALQAuDAArACwBAARKYXZhBwB8DAB9AH4MADMANAwAfwCADACBAIIMADwAQAwAPABB
AQAubmV0L25hd2FtYW4vcmVncGFyc2VyL3R5cGVwYWNrYWdlL1BUeXBlUGFja2FnZQEAKG5ldC9u
YXdhbWFuL3JlZ3BhcnNlci90eXBlcGFja2FnZS9QVFNwZWMBAAROYW1lDACDAIQBABBqYXZhL3oA
AAQAbGFuZy9TdHJpbmcBAAdDaGVja2VyAQAIVmVyaWZpZXIBAAhDb21waWxlcgEAHmphdmEvbGFu
Zy9OdWxsUG9pbnRlckV4Y2VwdGlvbgEAIFBhcnNlciB0eXBlIG5hbWUgY2Fubm90IGJlIG51bGwu
DAAvAIUBABBCb290c3RyYXBNZXRob2RzDwYAhggAhwwAiACADACJAIIBABpqYXZhL2xhbmcvUnVu
dGltZUV4Y2VwdGlvbgwAigCLAQAubmV0L25hd2FtYW4vcmVncGFyc2VyL3R5cGVwYWNrYWdlL1RQ
R2V0Q2hlY2tlcgwALwCMCACNAQAsbmV0L25hd2FtYW4vcmVncGFyc2VyL3R5cGVwYWNrYWdlL1RQ
VmVyaWZpZXIBACxuZXQvbmF3YW1hbi9yZWdwYXJzZXIvdHlwZXBhY2thZ2UvVFBDb21waWxlcgEA
JG5ldC9uYXdhbWFuL3JlZ3BhcnNlci90eXBlcy9QVFNpbXBsZQwALwCOAQAobmV0L25hd2FtYW4v
cmVncGFyc2VyL3R5cGVzL1BUQ29tcG9zYWJsZQwALwCPDAAvAJAMAC8AkQEADEpDMTU2MzMzMjU3
NgEAEGphdmEvbGFuZy9PYmplY3QBACduZXQvbmF3YW1hbi9zY3JpcHQvRnVuY3Rpb24kU2ltcGxl
JEJvZHkBAARCb2R5AQAUamF2YS9pby9TZXJpYWxpemFibGUHAJIBACJuZXQvbmF3YW1hbi9zY3Jp
cHQvRnVuY3Rpb24kU2ltcGxlAQATW0xqYXZhL2xhbmcvT2JqZWN0OwEAH25ldC9uYXdhbWFuL3Jl
Z3BhcnNlci9SZWdQYXJzZXIBACJuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUlBHZXRDaGVja2VyAQAD
KClWAQAgbmV0L25hd2FtYW4vc2NyaXB0L1NjcmlwdE1hbmFnZXIBAAhJbnN0YW5jZQEAIkxuZXQv
bmF3YW1hbi9zY3JpcHQvU2NyaXB0TWFuYWdlcjsBABhnZXRFbmdpbmVDbGFzc05hbWVCeU5hbWUB
ACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwEAEmdldERlZmF1bHRFbmdp
bmVPZgEANShMamF2YS9sYW5nL1N0cmluZzspTG5ldC9uYXdhbWFuL3NjcmlwdC9TY3JpcHRFbmdp
bmU7AQAIZ2V0VmFsdWUBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvT2JqZWN0OwEA
FShMamF2YS9sYW5nL1N0cmluZzspVgoAkwCUAQAzQ2hlY2tlciBvZiBhIHNpbXBsZSBwYXJzZXIg
dHoAAAQAeXBlIGNhbm5vdCBiZSBudWxsLiAoASkBABdtYWtlQ29uY2F0V2l0aENvbnN0YW50cwEA
EUdldEVuZ2luZUZyb21Db2RlAQAMbmV3UmVnUGFyc2VyAQBaKExuZXQvbmF3YW1hbi9yZWdwYXJz
ZXIvUFR5cGVQcm92aWRlcjtMamF2YS9sYW5nL1N0cmluZzspTG5ldC9uYXdhbWFuL3JlZ3BhcnNl
ci9SZWdQYXJzZXI7AQBXKExuZXQvbmF3YW1hbi9yZWdwYXJzZXIvdHlwZXBhY2thZ2UvUFR5cGVQ
YWNrYWdlO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvU3RyaW5nOylWAQAlQ2hlY2tlciBp
cyBub3QgYSB2YWxpZCBSZWdQYXJzZXIuICgBKQEANChMamF2YS9sYW5nL1N0cmluZztMbmV0L25h
d2FtYW4vcmVncGFyc2VyL0NoZWNrZXI7KVYBAHwoTGphdmEvbGFuZy9TdHJpbmc7TG5ldC9uYXdh
bWFuL3JlZ3BhcnNlci9DaGVja2VyO0xuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUmVzdWx0VmVyaWZp
ZXI7TG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9SUENvbXBpbGVyOylWAQA5KExqYXZhL2xhbmcvU3Ry
aW5nO0xuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUlBHZXRDaGVja2VyOylWAQCBKExqYXZhL2xhbmcv
U3RyaW5nO0xuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUlBHZXRDaGVja2VyO0xuZXQvbmF3YW1hbi9y
ZWdwYXJzZXIvUmVzdWx0VmVyaWZpZXI7TG5ldC9uYXdhbWFuL3JlZ3BhcnNlci9SUENvbXBpbGVy
OylWAQAbbmV0L25hd2FtYW4vc2NyaXB0L0Z1bmN0aW9uBwCVDACIAJgBACRqYXZhL2xhbmcvaW52
b2tlL1N0cmluZ0NvbmNhdEZhY3RvcnkHAJoBAAZMb29rdXABAJgoTGphdmEvbGFuZy9pbnZva2Uv
TWV0aG9kSGFuZGxlcyRMb29rdXA7TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9pbnZva2Uv
TWV0aG9kVHlwZTtMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xh
bmcvaW52b2tlL0NhbGxTaXRlOwcAmwEAJWphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlcyRM
b29rdXABAB5qYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMAIQAnACgAAgApACoAAgAQACsA
LAAAAHoAAAQAEAAtAC4AAAAJAAEALwAwAAEAMQAAACcAAgAEAAAADyq3AAEqK7UAAiostQADsQAA
AAEAMgAAAAYAAQAAAAQAAQAzADQAAQAxAAAAGwABAAEAAAADEgSwAAAAAQAyAAAABgABAAAABAAB
ADUANgABADEAAAAmAAIAAQAAAA6yAAUqtgAGuAAHtgAIsAAAAAEAMgAAAAYAAQAAAAQAAQA3ADQA
AQAxAAAAHQABAAEAAAAFKrQAA7AAAAABADIAAAAGAAEAAAAEAAEAOAA5AAEAMQAAAB0AAQABAAAA
BSq0AAKwAAAAAQAyAAAABgABAAAABACCADoAOwABADEAAAAfAAMAAgAAAAcqASu2AAmwAAAAAQAy
AAAABgABAAAABACBADwAQAABADEAAAAgAAQAAwAAAAgqAysstgAKsAAAAAEAMgAAAAYAAQAAAAQA
gQA8AEEAAQAxAAACHAAGAA8AAAEyLQMywAALOgQtBDLAAAw6BRkFEg22AA7AAA86BhkFEhC2AA7A
AA86BxkFEhG2AA7AAA86CBkFEhK2AA7AAA86CRkGxwANuwATWRIUtwAVvxkHxwASuwATWRkGugAW
AAC3ABW/AToKAToLAToMGQe4ABc6DKcABToNGQzHAA8ZBBkHuAAZOgqnABK7ABpZGQQZBhkHtwAb
OgsZCscAFxkLxwASuwATWRkGugAcAAC3ABW/GQjHAAcBpwAQuwAdWRkEGQYZCLcAHjoNGQnHAAcB
pwAQuwAfWRkEGQYZCbcAIDoOGQrGACkZDccAFBkOxwAPuwAhWRkGGQq3ACKwuwAjWRkGGQoZDRkO
twAksBkNxwAUGQ7HAA+7ACFZGQYZC7cAJbC7ACNZGQYZCxkNGQ63ACawAAEAbABzAHYAGAACADIA
AABaABYAAAAEABAABgAcAAcAKAAIADQACQBAAAsATwAMAGMADgBmAA8AaQAQAHgAEQCJABIAmAAU
ALEAFgDJABcA4QAZAOYAGgDwABsA/AAcAQwAHgEWAB8BIgAgAEIAAABwAA7/AE8ACgcAJwEHAD0H
AEMHAAsHAAwHAA8HAA8HAA8HAA8AABP/ABIADQcAJwEHAD0HAEMHAAsHAAwHAA8HAA8HAA8HAA8H
AEQHAEUHACgAAQcAGAEQDhgITAcAHfwACgcAHUwHAB/8ABwHAB8PFRBBADwARgABADEAAAAfAAMA
AwAAAAcqKyy2AAmwAAAAAQAyAAAABgABAAAABAADAEcAAAACAEgAPwAAABoAAwA9AHYAPgQJACkA
PQB0BgkAlgCZAJcAGQBfAAAADgACAGAAAQBhAGAAAQBocHVyACVbTG5ldC5uYXdhbWFuLmphdmFj
b21waWxlcnoAAAQALkNsYXNzRGF0YTtNrZe+1EeILwIAAHhwAAAAAHB0ABJKQzE1NjMzMzI1NzYu
Y2xhc3N0AAB1cQB+AAAAAANLrO0ABXVyABdbTGphdmEuaW8uU2VyaWFsaXphYmxlO67QCaxT1+1J
AgAAeHAAAAABc3IADEpDMTU2MzMzMjU3NsjJRqWid2AAAgACTAAFJENvZGV0ABJMamF2YS9sYW5n
L1N0cmluZztMAAokU2lnbmF0dXJldAAeTG5ldC9uYXdhbWFuL3NjcmlwdC9TaWduYXR1cmU7eHBw
c3IAI25ldC5uYXdhbWFuLnNjcmlwdC5TaWduYXR1cmUkU2ltcGxlJmsgDzRSghUCAARaAAlJc1Zh
ckFyZ3NMAAROYW1lcQB+AANbAApQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7TAAKUmV0
dXJuVHlwZXQAEUxqYXZhL2xhbmcvQ2xhc3M7eHAAcHVyABJbTGphdmEubGFuZy5DbGFzczurFteu
y81amQIAAHhwAAAAAnZyAC5uZXQubmF3YW1hbi5yZWdwYXJzZXIudHlwZXBhY2thZ2UuUFR5cGVQ
YWNrYWdlcXD2kL7+cB4DAAhaAAhJc0Zyb3plblsADEJ1ZmZlclRvU2F2ZXQAAltCTAAKQ2xhc3NQ
YXRoc3QAEkxqYXZhL3V0aWwvVmVjdG9yO0wACUVycm9yTXNnc3QAE0xqYXZhL3V0aWwvVHJlZU1h
cDtMAAZLRGF0YXNxAH4AD0wACU1vcmVEYXRhc3QAE0xqYXZhL3V0aWwvSGFzaE1hcDtMAAdQTlR5
cGVzcQB+AA9MAAZUU3BlY3NxAH4AD3hwdnIAKG5ldC5uYXdhbWFuLnJlZ3BhcnNlci50eXBlcGFj
a2FnZS5QVFNwZWOMmGbg7F1TwgIAAUwABURhdGFzcQB+ABB4cHZyABtuZXQubmF3YW1hbi5yZWdw
YXJzZXIuUFR5cGVjNXDcqbxd8wIABEkABUZsYWdzTAAKRGVmYXVsdFJlZnQAIExuZXQvbmF3YW1h
bi9yZWdwYXJzZXIvUFR5cGVSZWY7TAAJVFByb3ZpZGVydAAlTG5ldC9uYXdhbWFuL3JlZ3BhcnNl
ci9QVHlwZVByb3ZpZGVyO0wABlRoaXNSUHQAIUxuZXQvbmF3YW1hbi9yZWdwYXJzZXIvUmVnUGFy
c2VyO3hweHNxAH4AXXVxAH4AYAAAABRzcQB+AGNxAH4CanNxAH4AY3NxAH4AinQAA2RlZnNxAH4A
8nNxAH4A9XB0AAdJZ25vcmVkcQB+AfhzcQB+AGNzcQB+AIp0AAZTaW1wbGVzcQB+APJzcQB+APVw
dAAHSWdub3JlZHoAAAQAcQB+AfhzcQB+AGNzcQB+AIp0AAZwYXJzZXJzcQB+APJzcQB+APVwdAAH
SWdub3JlZHEAfgH4c3EAfgBic3EAfgBddXEAfgBgAAAABXNxAH4AaXEAfgMvcQB+ArlzcQB+APNz
cQB+APVwdAAKSWRlbnRpZmllcnNxAH4AaXNxAH4A/nVxAH4BAQAAAAJxAH4AgHEAfgChcHEAfgK5
c3EAfgBpc3EAfgD+dXEAfgEBAAAAAnEAfgLWcQB+AtFwcQB+ArlzcQB+AGlzcQB+AF11cQB+AGAA
AAACc3EAfgBjcQB+Au5zcQB+AGNxAH4C+nEAfgK5dAAFJE5hbWVzcQB+APJzcQB+APVwdAAHSWdu
b3JlZHEAfgCBc3EAfgBjcQB+A0NzcQB+AGlzcQB+AT9zcQB+AF11cQB+AGAAAAABc3EAfgBjcQB+
AHxxAH4AgXNxAH4B/HNxAH4AYnNxAH4AXXVxAH4AYAAAAAFzcQB+AGlzcQB+AT9zcQB+AF11cQB+
AGAAAAABc3EAfgBjc3EAfgBddXEAfgBgAAAACHNxAH4AY3EAfgB8c3EAfgBjcQB+AmpzcQB+AGNz
cQB+AIp0AANlbmRzcQB+APJzcQB+APVwdAAHSWdub3JlZHEAfgH4c3EAfgBjc3EAfgCKdAADZGVm
c3EAfgDyc3EAfgD1cHQAB0lnbm9yZWRxAH4B+HNxAH4AY3NxAH4AinQABnBhcnNlcnNxAH4AY3EA
fgDOcQB+AIF0AAYjQm9keStzcQB+AF11cQB+AGAAAAABc3EAfgBjc3EAfgBddXEAfgBgAAAAAXNx
AH4AaXNxAH4A/nVxAH4BAQAAAANzcQB+AF11cQB+AGAAAAABc3EAfgH8c3EAfgBic3EAfgBddXEA
fgBgAAAAAXNxAH4AaXNxAH4BP3NxAH4AXXVxAH4AYAAAAAFzcQB+AGNzcQB+AF11cQB+AGAAAAAE
c3EAfgBjcQB+AHxzcQB+AGNxAH4CanNxAH4AY3NxAH4A/nVxAH4BAQAAAAJzcQB+AIp0AAhWZXJp
ZmllcnNxAH4AinQACENvbXBpbGVycHNxAH4AY3EAfgNDcQB+AIF0AAgjQ2hlY2tlcnNxAH4AXXVx
AH4AYAAAAAFzcQB+AGNzcQB+AF11cQB+AGAAAAAHc3EAfgBpc3EAfgBddXEAfgBgAAAAAnNxAH4A
aXNxAH4BP3NxAH4AXXVxAH4AYAAAAAFzcQB+AGNzcQB+AF11cQB+AGAAAAAEc3EAfgBjcQB+AHxz
cQB+AGNxAH4CanNxAH4AY3NxAH4AinQAB0NoZWNrZXJzcQB+AGNxAH4DQ3EAfgCBc3EAfgBjcQB+
AHxxAH4CuXNxAH4AY3oAAAQAcQB+AmpzcQB+AGNzcQB+AIp0AAdDaGVja2Vyc3EAfgBjcQB+A0Nz
cQB+AGlzcQB+AGxxAH4AfHEAfgCBc3EAfgBjcQB+AHxzcQB+AGJzcQB+AF11cQB+AGAAAAABc3EA
fgBpcQB+AHFxAH4AgXQACCRDaGVja2Vyc3EAfgBddXEAfgBgAAAAAXNxAH4B/HNxAH4AYnNxAH4A
XXVxAH4AYAAAAAFzcQB+AGlzcQB+AT9zcQB+AF11cQB+AGAAAAABc3EAfgBjc3EAfgBddXEAfgBg
AAAABHNxAH4AY3EAfgB8c3EAfgBjcQB+AmpzcQB+AGNzcQB+AP51cQB+AQEAAAACc3EAfgCKdAAH
Q2hlY2tlcnNxAH4AinQACENvbXBpbGVycHNxAH4AY3EAfgNDcQB+AIF0AAkjVmVyaWZpZXJzcQB+
AF11cQB+AGAAAAABc3EAfgBjc3EAfgBddXEAfgBgAAAAB3NxAH4AaXNxAH4AXXVxAH4AYAAAAAJz
cQB+AGlzcQB+AT9zcQB+AF11cQB+AGAAAAABc3EAfgBjc3EAfgBddXEAfgBgAAAABHNxAH4AY3EA
fgB8c3EAfgBjcQB+AmpzcQB+AGNzcQB+AIp0AAhWZXJpZmllcnNxAH4AY3EAfgNDcQB+AIFzcQB+
AGNxAH4AfHEAfgK5c3EAfgBjcQB+AmpzcQB+AGNzcQB+AIp0AAhWZXJpZmllcnNxAH4AY3EAfgND
c3EAfgBpc3EAfgBscQB+AHxxAH4AgXNxAH4AY3EAfgB8c3EAfgBic3EAfgBddXEAfgBgAAAAAXNx
AH4AaXEAfgBxcQB+AIF0AAkkVmVyaWZpZXJzcQB+AF11cQB+AGAAAAABc3EAfgH8c3EAfgBic3EA
fgBddXEAfgBgAAAAAXNxAH4AaXNxAH4BP3NxAH4AXXVxAH4AYAAAAAFzcQB+AGNzcQB+AF11cQB+
AGAAAAAEc3EAfgBjcQB+AHxzcQB+AGNxAH4CanNxAH4AY3NxAH4A/nVxAH4BAQAAAAJzcQB+AIp0
AAdDaGVja2Vyc3EAfgCKdAAIVmVyaWZpZXJwc3EAfgBjcQB+A0NxAH4AgXQACSNDb21waWxlcnNx
AH4AXXVxAH4AYAAAAAFzcQB+AGNzcQB+AF11cQB+AGAAAAAHc3EAfgBpc3EAfgBddXEAfgBgAAAA
AnNxAH4AaXNxAH4BP3NxAH4AXXVxAH4AYAAAAAFzcQB+AGNzcQB+AF11cQB+AGAAAAAEc3EAfgBj
cQB+AHxzcQB+AGNxAH4CanNxAH4AY3NxAH4AinQACENvbXBpbGVyc3EAfgBjcQB+A0NxAH4AgXNx
AH4AY3EAfgB8cQB+ArlzcXoAAAEYAH4AY3EAfgJqc3EAfgBjc3EAfgCKdAAIQ29tcGlsZXJzcQB+
AGNxAH4DQ3NxAH4AaXNxAH4AbHEAfgB8cQB+AIFzcQB+AGNxAH4AfHNxAH4AYnNxAH4AXXVxAH4A
YAAAAAFzcQB+AGlxAH4AcXEAfgCBdAAJJENvbXBpbGVycHEAfgCBc3EAfgBjcQB+AHxzcQB+AGNx
AH4CanNxAH4AY3NxAH4AinQAA2VuZHNxAH4A8nNxAH4A9XB0AAdJZ25vcmVkcQB+AfhzcQB+AGNz
cQB+AIp0AANkZWZzcQB+APJzcQB+APVwdAAHSWdub3JlZHEAfgH4c3EAfgBjc3EAfgCKdAAGcGFy
c2Vyc3EAfgBjcQB+AM54eHh0AAggICBFNUYyRQ==
}
##:HASHES:0x   E5F2E-0x  5F0E94;
##:COUNTS:0x    32ED-0x   12839;
*******************************************************************************/